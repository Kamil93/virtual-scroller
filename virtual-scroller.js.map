{"version":3,"file":"virtual-scroller.js","sources":["../modules/shallowEqual.js","../modules/DOM.js","../modules/log.js","../modules/ItemHeights.js","../modules/VirtualScroller.js"],"sourcesContent":["// https://github.com/lodash/lodash/issues/2340\n// https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/shallowEqual.js\n\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @providesModule shallowEqual\r\n * @typechecks\r\n * @flow\r\n */\n\n/*eslint-disable no-self-compare */\n'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\r\n * inlined Object.is polyfill to avoid requiring consumers ship their own\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\r\n */\n\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n/**\r\n * Performs equality by iterating through keys on an object and returning false\r\n * when any key has values which are not strictly equal between the arguments.\r\n * Returns true when the values of all keys are strictly equal.\r\n */\n\n\nexport default function shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (_typeof(objA) !== 'object' || objA === null || _typeof(objB) !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=shallowEqual.js.map","/**\r\n * Returns the DOM element's `top` and `left` offset relative to the document.\r\n * `document` can potentially have margins so this function takes care of that.\r\n * @param  {object} element\r\n * @return {object} `{ top: number, left: number, width: number, height: number }`\r\n */\nexport function getOffset(element) {\n  // Copied from:\n  // http://stackoverflow.com/questions/5598743/finding-elements-position-relative-to-the-document\n  var onScreenCoordinates = element.getBoundingClientRect();\n  var documentLeftBorderWidth = document.clientLeft || document.body.clientLeft || 0;\n  var documentTopBorderWidth = document.clientTop || document.body.clientTop || 0; // `window.scrollY` and `window.scrollX` aren't supported in Internet Explorer.\n\n  var scrollY = window.pageYOffset;\n  var scrollX = window.pageXOffset;\n  var top = onScreenCoordinates.top + scrollY - documentTopBorderWidth;\n  var left = onScreenCoordinates.left + scrollX - documentLeftBorderWidth;\n  return {\n    top: top,\n    left: left,\n    width: onScreenCoordinates.width,\n    height: onScreenCoordinates.height\n  };\n}\nexport function getScrollY() {\n  // `window.scrollY` is not supported by Internet Explorer.\n  return window.pageYOffset;\n}\nexport function clearElement(element) {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\nexport function getScreenHeight() {\n  return window.innerHeight;\n}\nexport function getScreenBounds() {\n  var height = getScreenHeight();\n  return {\n    // The first pixel of the viewport.\n    top: getScrollY(),\n    // The pixel after the last pixel of the viewport.\n    bottom: getScrollY() + height,\n    height: height\n  };\n}\n//# sourceMappingURL=DOM.js.map","function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nexport default function log() {\n  if (isDebug()) {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (_console = console).log.apply(_console, _toConsumableArray(['[virtual-scroller]'].concat(args)));\n  }\n}\nexport function isDebug() {\n  return typeof window !== 'undefined' && window.VirtualScrollerDebug;\n}\n//# sourceMappingURL=log.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport log from './log';\n\nvar ItemHeights =\n/*#__PURE__*/\nfunction () {\n  function ItemHeights(getContainerNode, itemsCount, getState) {\n    _classCallCheck(this, ItemHeights);\n\n    this.getContainerNode = getContainerNode;\n    this.getState = getState; // Initialize `measuredItemsHeight`, `firstMeasuredItemIndex` and `lastMeasuredItemIndex`.\n    // For example, if `state` was supplied to `VirtualScroller`.\n\n    this.measuredItemsHeight = 0;\n    var i = 0;\n\n    while (i < getState().itemHeights.length) {\n      if (getState().itemHeights[i] == undefined) {\n        if (this.firstMeasuredItemIndex !== undefined) {\n          this.lastMeasuredItemIndex = i - 1;\n          break;\n        }\n      } else {\n        if (this.firstMeasuredItemIndex === undefined) {\n          this.firstMeasuredItemIndex = i;\n        }\n\n        this.measuredItemsHeight += getState().itemHeights[i];\n      }\n\n      i++;\n    }\n  } // Seems to be no longer used.\n  // getItemHeight(i, firstShownItemIndex) {\n  // \tif (this.get(i)) {\n  // \t\treturn this.get(i)\n  // \t}\n  // \tconst itemHeight = this._getItemHeight(i, firstShownItemIndex)\n  // \tif (itemHeight) {\n  // \t\tthis.set(i, itemHeight)\n  // \t\treturn itemHeight\n  // \t}\n  // \treturn this.getAverage()\n  // }\n\n\n  _createClass(ItemHeights, [{\n    key: \"_getItemHeight\",\n    value: function _getItemHeight(i, firstShownItemIndex) {\n      var container = this.getContainerNode();\n\n      if (container) {\n        var nodeIndex = i - firstShownItemIndex;\n\n        if (nodeIndex >= 0 && nodeIndex < container.childNodes.length) {\n          // `offsetHeight` is not precise enough (doesn't return fractional pixels).\n          // let height = container.childNodes[nodeIndex].offsetHeight\n          return container.childNodes[nodeIndex].getBoundingClientRect().height;\n        }\n      }\n    }\n  }, {\n    key: \"getItemSpacing\",\n    value: function getItemSpacing() {\n      var container = this.getContainerNode();\n\n      if (container) {\n        if (container.childNodes.length > 1) {\n          var firstItem = container.childNodes[0];\n          var secondItem = container.childNodes[1];\n          var firstItemRect = firstItem.getBoundingClientRect();\n          var secondItemRect = secondItem.getBoundingClientRect();\n          var spacing = secondItemRect.top - (firstItemRect.top + firstItemRect.height); // Debugging.\n\n          if (window.VirtualScrollerDebug) {\n            log('Item spacing', spacing);\n          }\n\n          return spacing;\n        }\n      }\n    }\n    /**\r\n     * Updates item heights and item spacing.\r\n     * @param  {number} fromIndex\r\n     * @param  {number} toIndex\r\n     * @param  {number} firstShownItemIndex\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(fromIndex, toIndex, firstShownItemIndex) {\n      if (this.getState().itemSpacing === undefined) {\n        this.getState().itemSpacing = this.getItemSpacing();\n      } // Reset `this.measuredItemsHeight` if it's not a continuous scroll.\n\n\n      if (this.firstMeasuredItemIndex !== undefined) {\n        if (fromIndex > this.lastMeasuredItemIndex + 1 || toIndex < this.firstMeasuredItemIndex - 1) {\n          // The previously measured average item height might still be\n          // more precise if it contains more measured items (\"samples\").\n          this.previousAverageItemHeight = this.averageItemHeight;\n          this.previousAverageItemHeightSamplesCount = this.lastMeasuredItemIndex - this.firstMeasuredItemIndex + 1; // Reset.\n\n          this.measuredItemsHeight = 0;\n          this.firstMeasuredItemIndex = undefined;\n          this.lastMeasuredItemIndex = undefined;\n        }\n      }\n\n      var previousFirstMeasuredItemIndex = this.firstMeasuredItemIndex;\n      var previousLastMeasuredItemIndex = this.lastMeasuredItemIndex;\n      var firstMeasuredItemIndexHasBeenUpdated = false;\n      var i = fromIndex;\n\n      while (i <= toIndex) {\n        // Recalculate item heights because item height might change\n        // after showing it compared to what it was when hiding it.\n        // For example, a YouTube video might have been expanded\n        // and then the item is hidden and it's state is reset\n        // and when it's shown again the YouTube video is not expanded.\n        // if (this.get(i) === undefined) {\n        var height = this._getItemHeight(i, firstShownItemIndex);\n\n        if (height !== undefined) {\n          this.set(i, height); // Update new items height (before).\n\n          if (previousFirstMeasuredItemIndex === undefined || i < previousFirstMeasuredItemIndex) {\n            this.measuredItemsHeight += height; // Update first measured item index.\n\n            if (!firstMeasuredItemIndexHasBeenUpdated) {\n              this.firstMeasuredItemIndex = i;\n              firstMeasuredItemIndexHasBeenUpdated = true;\n            }\n          } // Update new items height (after).\n\n\n          if (previousLastMeasuredItemIndex === undefined || i > previousLastMeasuredItemIndex) {\n            // If `previousLastMeasuredItemIndex` is `undefined`\n            // then `previousFirstMeasuredItemIndex` is also `undefined`\n            // which means that `this.measuredItemsHeight` has already been updated.\n            if (previousLastMeasuredItemIndex !== undefined) {\n              this.measuredItemsHeight += height;\n            } // Update last measured item index.\n\n\n            this.lastMeasuredItemIndex = i;\n          }\n        } // }\n\n\n        i++;\n      } // Update average item height.\n\n\n      this.updateAverageItemHeight();\n    }\n  }, {\n    key: \"updateItemHeight\",\n    value: function updateItemHeight(i, firstShownItemIndex) {\n      var previousHeight = this.get(i);\n\n      var height = this._getItemHeight(i, firstShownItemIndex); // The items might not have rendered at all,\n      // for example, when using React, because\n      // React performs DOM updates asynchronously\n      // and if the user scrolls fast enough\n      // React might not have rendered the item\n      // since it has become visible till it became no longer visible.\n\n\n      if (previousHeight === undefined || height === undefined) {\n        return;\n      }\n\n      this.set(i, height);\n      this.measuredItemsHeight += height - previousHeight;\n    }\n  }, {\n    key: \"updateAverageItemHeight\",\n    value: function updateAverageItemHeight() {\n      this.averageItemHeightSamplesCount = this.lastMeasuredItemIndex - this.firstMeasuredItemIndex + 1;\n      this.averageItemHeight = this.measuredItemsHeight / this.averageItemHeightSamplesCount;\n    }\n    /* Public API. */\n\n  }, {\n    key: \"getAverage\",\n    value: function getAverage() {\n      // Previously measured average item height might still be\n      // more precise if it contains more measured items (\"samples\").\n      if (this.previousAverageItemHeight) {\n        if (this.previousAverageItemHeightSamplesCount > this.averageItemHeightSamplesCount) {\n          return this.previousAverageItemHeight;\n        }\n      }\n\n      return this.averageItemHeight || 0;\n    }\n  }, {\n    key: \"get\",\n    value: function get(i) {\n      return this.getState().itemHeights[i];\n    }\n  }, {\n    key: \"set\",\n    value: function set(i, height) {\n      this.getState().itemHeights[i] = height;\n    }\n  }, {\n    key: \"onPrepend\",\n    value: function onPrepend(count) {\n      if (this.firstMeasuredItemIndex !== undefined) {\n        this.firstMeasuredItemIndex += count;\n        this.lastMeasuredItemIndex += count;\n      }\n    }\n  }]);\n\n  return ItemHeights;\n}();\n\nexport { ItemHeights as default };\n//# sourceMappingURL=ItemHeights.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shallowEqual from './shallowEqual';\nimport { getOffset, getScrollY, getScreenHeight, getScreenBounds, clearElement } from './DOM';\nimport ItemHeights from './ItemHeights';\nimport log, { isDebug } from './log';\nvar START_FROM_INDEX = 0;\n\nvar VirtualScroller =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * @param  {function} getContainerNode — Returns container DOM `Element`.\r\n   * @param  {any[]} items — Are only used for getting items count and for comparing \"previous\" items to \"next\" items if `.updateItems(newItems)` is called.\r\n   * @param  {Object} [options] — See README.md.\r\n   * @return {VirtualScroller}\r\n   */\n  function VirtualScroller(getContainerNode, items) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, VirtualScroller);\n\n    _defineProperty(this, \"onScroll\", function () {\n      return _this.onUpdateShownItemIndexes({\n        reason: 'scroll'\n      });\n    });\n\n    _defineProperty(this, \"onResize\", function () {\n      return _this.onUpdateShownItemIndexes({\n        reason: 'resize'\n      });\n    });\n\n    _defineProperty(this, \"updateShownItemIndexes\", function (callback) {\n      // // A minor optimization. Just because I can.\n      // let listCoordinates\n      // if (this.listCoordinatesCached) {\n      // \tlistCoordinates = this.listCoordinatesCached\n      // \tthis.listCoordinatesCached = undefined\n      // } else {\n      // \tlistCoordinates = getOffset(this.getContainerNode())\n      // }\n      // const { top, height } = listCoordinates\n      var _getOffset = getOffset(_this.getContainerNode()),\n          top = _getOffset.top,\n          height = _getOffset.height;\n\n      var _getScreenBounds = getScreenBounds(),\n          screenTop = _getScreenBounds.top,\n          screenBottom = _getScreenBounds.bottom; // Set screen top and bottom for current layout.\n\n\n      _this.latestLayoutScreenTopAfterMargin = screenTop - _this.getMargin();\n      _this.latestLayoutScreenBottomAfterMargin = screenBottom + _this.getMargin(); // Find the items which are displayed in the viewport.\n\n      var _this$getItemIndexes = _this.getItemIndexes(screenTop - _this.getMargin(), screenBottom + _this.getMargin(), top, top + height),\n          firstShownItemIndex = _this$getItemIndexes.firstShownItemIndex,\n          lastShownItemIndex = _this$getItemIndexes.lastShownItemIndex,\n          redoLayoutAfterRender = _this$getItemIndexes.redoLayoutAfterRender; // Measure \"before\" items height.\n\n\n      var beforeItemsHeight = _this.getBeforeItemsHeight(firstShownItemIndex, lastShownItemIndex); // Measure \"after\" items height.\n\n\n      var afterItemsHeight = _this.getAfterItemsHeight(firstShownItemIndex, lastShownItemIndex); // Update the heights of items to be hidden on next render.\n      // For example, a user could click a \"Show more\" button,\n      // or an \"Expand YouTube video\" button, which would result\n      // in the list item height changing and `this.itemHeights[i]`\n      // being stale, so it's updated here when hiding the item.\n\n\n      _this.updateWillBeHiddenItemHeightsAndState(firstShownItemIndex, lastShownItemIndex); // Debugging.\n\n\n      log('~ Layout results ~');\n      log('First shown item index', firstShownItemIndex);\n      log('Last shown item index', lastShownItemIndex);\n      log('Before items height', beforeItemsHeight);\n      log('After items height', afterItemsHeight);\n      log('Average item height (for previous layout)', _this.itemHeights.getAverage());\n\n      if (redoLayoutAfterRender) {\n        log('Redo layout after render');\n      } // Optionally preload items to be rendered.\n\n\n      _this.onShowItems(firstShownItemIndex, lastShownItemIndex); // Render.\n\n\n      _this.setState({\n        firstShownItemIndex: firstShownItemIndex,\n        lastShownItemIndex: lastShownItemIndex,\n        beforeItemsHeight: beforeItemsHeight,\n        afterItemsHeight: afterItemsHeight // // Average item height is stored in state to differentiate between\n        // // the initial state and \"anything has been measured already\" state.\n        // averageItemHeight: this.itemHeights.getAverage()\n\n      }, function () {\n        return callback(redoLayoutAfterRender ? 1 : 0);\n      });\n    });\n\n    _defineProperty(this, \"updateShownItemIndexesRecursive\", function () {\n      _this.updateShownItemIndexes(function (status) {\n        if (status === 1) {\n          // Recurse in a timeout to prevent React error:\n          // \"Maximum update depth exceeded.\n          //  This can happen when a component repeatedly calls\n          //  setState inside componentWillUpdate or componentDidUpdate.\n          //  React limits the number of nested updates to prevent infinite loops.\"\n          setTimeout(function () {\n            if (_this.isMounted) {\n              _this.updateShownItemIndexesRecursive();\n            } else {\n              _this.onDoneUpdatingItemIndexes();\n            }\n          });\n        } else {\n          _this.onDoneUpdatingItemIndexes();\n        }\n      });\n    });\n\n    _defineProperty(this, \"restoreScroll\", function () {\n      var _this$restoreScrollAf = _this.restoreScrollAfterPrepend,\n          index = _this$restoreScrollAf.index,\n          screenTop = _this$restoreScrollAf.screenTop;\n      _this.restoreScrollAfterPrepend = undefined;\n\n      var newScreenTop = _this.getItemElement(index).getBoundingClientRect().top;\n\n      var scrollByY = newScreenTop - screenTop;\n\n      if (scrollByY !== 0) {\n        log('Restore scroll position: scroll by', scrollByY);\n        window.scrollTo(0, getScrollY() + scrollByY);\n      }\n    });\n\n    _defineProperty(this, \"onUpdateShownItemIndexes\", function (_ref) {\n      var reason = _ref.reason,\n          force = _ref.force;\n\n      // Not implementing the \"delayed\" layout feature for now.\n      // if (this.delayLayout({ reason, force })) {\n      // \treturn\n      // }\n      //\n      // If there're no items then no need to calculate the layout:\n      // if empty `items` have been set on `state` then it has rendered nothing.\n      if (_this.getItemsCount() === 0) {\n        return;\n      } // If a re-layout is already scheduled then it will happen anyway\n      // for the same `state` so there's no need to start another one.\n\n\n      if (_this.isUpdatingItemIndexes) {\n        return;\n      } // Prefer not re-rendering the list as the user's scrolling.\n      // Instead, prefer delaying such re-renders until the user stops scrolling.\n      //\n      // If the user has scrolled then it means that they haven't\n      // stopped scrolling so cancel the timeout.\n      // Otherwise, a layout happens so no need for the deferred one\n      // so cancel the timeout anyway.\n\n\n      clearTimeout(_this.onUserStopsScrollingTimeout); //\n\n      if (reason === 'scroll') {\n        // See whether rendering new previous/next items is required right now\n        // or it can be deferred until the user stops scrolling for better perceived performance.\n        // const listCoordinates = getOffset(this.getContainerNode())\n        // const { top, height } = listCoordinates\n        // const bottom = top + height\n        // const { top: screenTop, bottom: screenBottom } = getScreenBounds()\n        // const renderedItemsTop = top + this.getState().beforeItemsHeight\n        // const renderedItemsBottom = top + height - this.getState().afterItemsHeight\n        // const forceRender = (screenTop < renderedItemsTop && this.getState().firstShownItemIndex > 0) ||\n        // \t(screenBottom > renderedItemsBottom && this.getState().lastShownItemIndex < this.getItemsCount() - 1)\n        var forceRender = // If the items have been rendered at least one\n        _this.latestLayoutScreenTopAfterMargin !== undefined && // If the user has scrolled up past the extra \"margin\"\n        getScrollY() < _this.latestLayoutScreenTopAfterMargin && // and if there're any previous non-rendered items to render.\n        _this.getState().firstShownItemIndex > 0 || // If the items have been rendered at least one\n        _this.latestLayoutScreenBottomAfterMargin !== undefined && // If the user has scrolled down past the extra \"margin\"\n        getScrollY() + getScreenHeight() > _this.latestLayoutScreenBottomAfterMargin && // and if there're any next non-rendered items to render.\n        _this.getState().lastShownItemIndex < _this.getItemsCount() - 1;\n\n        if (forceRender) {\n          log('The user has scrolled far enough: force re-render');\n        } else {\n          log('The user hasn\\'t scrolled too much: delay re-render');\n        } // \"scroll\" events are usually dispatched every 16 milliseconds\n        // for the 60fps refresh rate, so waiting for 100 milliseconds\n        // is about 6 frames of inactivity which would definitely mean\n        // that either the user's no longer scrolling or the browser's\n        // stuttering (skipping frames due to high load) anyway.\n\n\n        if (!forceRender) {\n          return _this.onUserStopsScrollingTimeout = setTimeout(_this.onUserStoppedScrolling, 100);\n        }\n      } // // A minor optimization. Just because I can.\n      // this.listCoordinatesCached = listCoordinates\n      // Re-render the list.\n\n\n      _this.updateLayout(reason);\n    });\n\n    _defineProperty(this, \"onUserStoppedScrolling\", function () {\n      if (_this.isMounted) {\n        // Re-render the list.\n        _this.updateLayout('stopped scrolling');\n      }\n    });\n\n    var getState = options.getState,\n        setState = options.setState,\n        onStateChange = options.onStateChange;\n    var estimatedItemHeight = options.estimatedItemHeight,\n        onLastSeenItemIndexChange = options.onLastSeenItemIndexChange,\n        state = options.state;\n    log('~ Initialize ~'); // If `state` is passed then use `items` from `state`\n    // instead of the `items` argument.\n\n    if (state) {\n      items = state.items;\n    } // if (margin === undefined) {\n    // \t// Renders items which are outside of the screen by this \"margin\".\n    // \t// Is the screen height by default: seems to be the optimal value\n    // \t// for \"Page Up\" / \"Page Down\" navigation and optimized mouse wheel scrolling.\n    // \tmargin = typeof window === 'undefined' ? 0 : window.innerHeight\n    // }\n\n\n    this.initialItems = items; // this.margin = margin\n\n    this.estimatedItemHeight = estimatedItemHeight; // this.getItemState = getItemState\n\n    if (onLastSeenItemIndexChange) {\n      this.onLastSeenItemIndexChange = onLastSeenItemIndexChange;\n      this.lastSeenItemIndex = -1;\n    } // Remove accidental text nodes from container.\n    // Also guards against cases when someone accidentally tries\n    // using `VirtualScroller` on a non-empty element.\n\n\n    if (getContainerNode()) {\n      clearElement(getContainerNode());\n    }\n\n    if (setState) {\n      this.getState = getState;\n      this.setState = setState;\n    } else {\n      this.getState = function () {\n        return _this.state;\n      };\n\n      this.setState = function (state, callback) {\n        var prevState = _this.state;\n        _this.state = _objectSpread({}, prevState, state);\n\n        if (!shallowEqual(_this.state, prevState)) {\n          if (onStateChange) {\n            onStateChange(_this.state, prevState);\n          }\n\n          if (_this.isMounted) {\n            _this.onUpdate(prevState);\n          }\n        }\n\n        if (callback) {\n          callback();\n        }\n      };\n    }\n\n    if (state) {\n      log('Initial state (passed)', state);\n    }\n\n    this.setState(state || this.getInitialState());\n    this.getContainerNode = getContainerNode;\n    this.itemHeights = new ItemHeights(getContainerNode, items.length, this.getState);\n    log('Items count', items.length); // log('Start from index', START_FROM_INDEX)\n\n    if (estimatedItemHeight) {\n      log('Estimated item height', estimatedItemHeight);\n    }\n  }\n  /**\r\n   * Returns the initial state of the `VirtualScroller`.\r\n   * @param  {object} [customState] — Any additional \"custom\" state may be stored in `VirtualScroller`'s state. For example, React implementation stores item \"refs\" as \"custom\" state.\r\n   * @return {object}\r\n   */\n\n\n  _createClass(VirtualScroller, [{\n    key: \"getInitialState\",\n    value: function getInitialState(customState) {\n      var firstShownItemIndex;\n      var lastShownItemIndex;\n      var itemsCount = this.initialItems.length; // If there're no items then `firstShownItemIndex` stays `undefined`.\n\n      if (itemsCount > 0) {\n        firstShownItemIndex = Math.min(START_FROM_INDEX, itemsCount - 1);\n        lastShownItemIndex = this.getLastShownItemIndex(firstShownItemIndex, itemsCount);\n      } // Optionally preload items to be rendered.\n\n\n      this.onShowItems(firstShownItemIndex, lastShownItemIndex);\n\n      var state = _objectSpread({}, customState, {\n        items: this.initialItems,\n        itemStates: new Array(itemsCount),\n        itemHeights: new Array(itemsCount),\n        itemSpacing: undefined,\n        beforeItemsHeight: 0,\n        afterItemsHeight: 0,\n        firstShownItemIndex: firstShownItemIndex,\n        lastShownItemIndex: lastShownItemIndex\n      });\n\n      log('Initial state (created)', state);\n      log('First shown item index', firstShownItemIndex);\n      log('Last shown item index', lastShownItemIndex);\n      return state;\n    }\n    /**\r\n     * Returns estimated list item height.\r\n     * (depends on which items have been previously rendered and measured).\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"getEstimatedItemHeight\",\n    value: function getEstimatedItemHeight() {\n      return this.itemHeights && this.itemHeights.getAverage() || this.estimatedItemHeight || 0;\n    }\n  }, {\n    key: \"getItemSpacing\",\n    value: function getItemSpacing() {\n      return this.getState().itemSpacing || 0;\n    }\n  }, {\n    key: \"getEstimatedItemsCount\",\n    value: function getEstimatedItemsCount(height) {\n      if (this.getEstimatedItemHeight()) {\n        return Math.ceil((height + this.getItemSpacing()) / (this.getEstimatedItemHeight() + this.getItemSpacing()));\n      } else {\n        return 1;\n      }\n    }\n  }, {\n    key: \"getEstimatedItemsCountOnScreen\",\n    value: function getEstimatedItemsCountOnScreen() {\n      if (typeof window !== 'undefined') {\n        return this.getEstimatedItemsCount(window.innerHeight);\n      } else {\n        return 1;\n      }\n    }\n  }, {\n    key: \"getLastShownItemIndex\",\n    value: function getLastShownItemIndex(firstShownItemIndex, itemsCount) {\n      return Math.min(firstShownItemIndex + (this.getEstimatedItemsCountOnScreen() - 1), itemsCount - 1);\n    }\n  }, {\n    key: \"getItemsCount\",\n    value: function getItemsCount() {\n      return this.getState().items.length;\n    }\n  }, {\n    key: \"getMargin\",\n    value: function getMargin() {\n      // Renders items which are outside of the screen by this \"margin\".\n      // Is the screen height by default: seems to be the optimal value\n      // for \"Page Up\" / \"Page Down\" navigation and optimized mouse wheel scrolling.\n      return window.innerHeight;\n    }\n  }, {\n    key: \"onShowItems\",\n    value: function onShowItems(firstShownItemIndex, lastShownItemIndex) {\n      if (this.onLastSeenItemIndexChange) {\n        if (lastShownItemIndex > this.lastSeenItemIndex) {\n          this.lastSeenItemIndex = lastShownItemIndex;\n          this.onLastSeenItemIndexChange(this.lastSeenItemIndex);\n        }\n      }\n    }\n  }, {\n    key: \"onMount\",\n    value: function onMount() {\n      var _this$getState = this.getState(),\n          firstShownItemIndex = _this$getState.firstShownItemIndex,\n          lastShownItemIndex = _this$getState.lastShownItemIndex; // If there're any items.\n\n\n      if (this.getItemsCount() > 0) {\n        // Update item heights.\n        this.updateItemHeights(firstShownItemIndex, lastShownItemIndex);\n      }\n\n      this.isMounted = true;\n      this.onUpdateShownItemIndexes({\n        reason: 'on mount'\n      });\n      window.addEventListener('scroll', this.onScroll);\n      window.addEventListener('resize', this.onResize);\n    }\n  }, {\n    key: \"onUnmount\",\n    value: function onUnmount() {\n      this.isMounted = false;\n      window.removeEventListener('scroll', this.onScroll);\n      window.removeEventListener('resize', this.onResize);\n      clearTimeout(this.onUserStopsScrollingTimeout);\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(prevState) {\n      var _this$getState2 = this.getState(),\n          items = _this$getState2.items,\n          firstShownItemIndex = _this$getState2.firstShownItemIndex,\n          lastShownItemIndex = _this$getState2.lastShownItemIndex; // If new items are shown (or older items are hidden).\n\n\n      if (firstShownItemIndex !== prevState.firstShownItemIndex || lastShownItemIndex !== prevState.lastShownItemIndex || items !== prevState.items) {\n        // Update seen item heights.\n        this.updateItemHeights(firstShownItemIndex, lastShownItemIndex);\n      }\n    }\n  }, {\n    key: \"updateItemHeights\",\n    value: function updateItemHeights(fromIndex, toIndex) {\n      var _this$getState3 = this.getState(),\n          firstShownItemIndex = _this$getState3.firstShownItemIndex;\n\n      if (fromIndex !== undefined) {\n        this.itemHeights.update(fromIndex, toIndex, firstShownItemIndex);\n      }\n    }\n  }, {\n    key: \"updateItemHeight\",\n    value: function updateItemHeight(i) {\n      var _this$getState4 = this.getState(),\n          firstShownItemIndex = _this$getState4.firstShownItemIndex;\n\n      this.itemHeights.updateItemHeight(i, firstShownItemIndex);\n    }\n  }, {\n    key: \"onItemStateChange\",\n    value: function onItemStateChange(i, itemState) {\n      if (isDebug()) {\n        log('Item', i, 'state changed');\n        log('Previous state' + '\\n' + JSON.stringify(this.getState().itemStates[i], null, 2));\n        log('New state' + '\\n' + JSON.stringify(itemState, null, 2));\n      }\n\n      this.getState().itemStates[i] = itemState;\n    }\n  }, {\n    key: \"onItemHeightChange\",\n    value: function onItemHeightChange(i) {\n      var _this$getState5 = this.getState(),\n          itemHeights = _this$getState5.itemHeights;\n\n      var previousHeight = itemHeights[i];\n      this.updateItemHeight(i);\n      var newHeight = itemHeights[i];\n\n      if (previousHeight !== newHeight) {\n        log('Item', i, 'height changed from', previousHeight, 'to', newHeight);\n        this.onUpdateShownItemIndexes({\n          reason: 'item height change'\n        });\n      }\n    } // Finds the items which are displayed in the viewport.\n\n  }, {\n    key: \"getVisibleItemIndexes\",\n    value: function getVisibleItemIndexes(screenTop, screenBottom, listTop) {\n      var showItemsFromIndex;\n      var showItemsToIndex;\n      var itemsHeight = 0;\n      var redoLayoutAfterRender = false;\n      var i = START_FROM_INDEX;\n\n      while (i < this.getItemsCount()) {\n        var height = this.itemHeights.get(i); // If an item that hasn't been shown (measured) yet is encountered\n        // then show such item and then retry after it has been measured.\n\n        if (height === undefined) {\n          log(\"Item \".concat(i, \" height hasn't been measured yet: render and redo layout\"));\n\n          if (showItemsFromIndex === undefined) {\n            showItemsFromIndex = i;\n          }\n\n          var heightLeft = screenBottom - (listTop + itemsHeight);\n          var batchSize = this.getEstimatedItemsCount(heightLeft);\n          showItemsToIndex = Math.min(i + (batchSize - 1), // Guard against index overflow.\n          this.getItemsCount() - 1);\n          redoLayoutAfterRender = true;\n          break;\n        }\n\n        itemsHeight += height; // If this is the first item visible\n        // then start showing items from it.\n\n        if (showItemsFromIndex === undefined) {\n          if (listTop + itemsHeight > screenTop) {\n            log('First visible item index (including margin)', i);\n            showItemsFromIndex = i;\n          }\n        } // Items can have spacing.\n\n\n        if (i < this.getItemsCount() - 1) {\n          itemsHeight += this.getItemSpacing();\n        } // If this item is the last one visible in the viewport then exit.\n\n\n        if (listTop + itemsHeight > screenBottom) {\n          log('Last visible item index (including margin)', i); // The list height is estimated until all items have been seen,\n          // so it's possible that even when the list DOM element happens\n          // to be in the viewport in reality the list isn't visible\n          // in which case `showItemsFromIndex` will be `undefined`.\n\n          if (showItemsFromIndex !== undefined) {\n            showItemsToIndex = i;\n          }\n\n          break;\n        }\n\n        i++;\n      } // If there're no more items then the last item is the last one to show.\n\n\n      if (showItemsFromIndex !== undefined && showItemsToIndex === undefined) {\n        showItemsToIndex = this.getItemsCount() - 1;\n        log('Last item index (is fully visible)', showItemsToIndex);\n      } // If scroll position is scheduled to be restored\n      // after render then the anchor item must be rendered\n      // and all the prepended items before it.\n\n\n      if (this.restoreScrollAfterPrepend) {\n        if (showItemsToIndex < this.restoreScrollAfterPrepend.index) {\n          showItemsToIndex = this.restoreScrollAfterPrepend.index;\n        } // No need to redo layout after render because all\n        // prepended items are rendered in a single pass.\n        // It removes the visual jitter otherwise happening\n        // due to scroll position restoration waiting for\n        // two layout cycles instead of one.\n\n\n        redoLayoutAfterRender = false;\n      }\n\n      return {\n        firstShownItemIndex: showItemsFromIndex,\n        lastShownItemIndex: showItemsToIndex,\n        redoLayoutAfterRender: redoLayoutAfterRender\n      };\n    }\n  }, {\n    key: \"getInvisibleItemIndexes\",\n    value: function getInvisibleItemIndexes() {\n      var i = START_FROM_INDEX;\n      return {\n        firstShownItemIndex: i,\n        lastShownItemIndex: i,\n        redoLayoutAfterRender: this.itemHeights.get(i) === undefined\n      };\n    }\n  }, {\n    key: \"getItemIndexes\",\n    value: function getItemIndexes(screenTop, screenBottom, top, bottom) {\n      var isVisible = bottom > screenTop && top < screenBottom;\n\n      if (!isVisible) {\n        return this.getInvisibleItemIndexes();\n      } // Find the items which are displayed in the viewport.\n\n\n      var indexes = this.getVisibleItemIndexes(screenTop, screenBottom, top); // The list height is estimated until all items have been seen,\n      // so it's possible that even when the list DOM element happens\n      // to be in the viewport in reality the list isn't visible\n      // in which case `firstShownItemIndex` will be `undefined`.\n\n      if (indexes.firstShownItemIndex === undefined) {\n        return this.getInvisibleItemIndexes();\n      }\n\n      return indexes;\n    }\n    /**\r\n     * Measures \"before\" items height.\r\n     * @param  {number} firstShownItemIndex — New first shown item index.\r\n     * @param  {number} lastShownItemIndex — New last shown item index.\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"getBeforeItemsHeight\",\n    value: function getBeforeItemsHeight(firstShownItemIndex, lastShownItemIndex) {\n      var beforeItemsHeight = 0; // Add all \"before\" items height.\n\n      var i = START_FROM_INDEX;\n\n      while (i < firstShownItemIndex) {\n        beforeItemsHeight += this.itemHeights.get(i) || this.itemHeights.getAverage();\n        beforeItemsHeight += this.getItemSpacing();\n        i++;\n      }\n\n      return beforeItemsHeight;\n    }\n    /**\r\n     * Measures \"after\" items height.\r\n     * @param  {number} firstShownItemIndex — New first shown item index.\r\n     * @param  {number} lastShownItemIndex — New last shown item index.\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"getAfterItemsHeight\",\n    value: function getAfterItemsHeight(firstShownItemIndex, lastShownItemIndex) {\n      var afterItemsHeight = 0;\n      var i = lastShownItemIndex + 1; // Add all \"after\" items height.\n\n      while (i < this.getItemsCount()) {\n        afterItemsHeight += this.getItemSpacing();\n        afterItemsHeight += this.itemHeights.get(i) || this.itemHeights.getAverage();\n        i++;\n      }\n\n      return afterItemsHeight;\n    }\n    /**\r\n     * Updates the heights of items to be hidden on next render.\r\n     * For example, a user could click a \"Show more\" button,\r\n     * or an \"Expand YouTube video\" button, which would result\r\n     * in the list item height changing and `this.itemHeights[i]`\r\n     * being stale, so it's updated here when hiding the item.\r\n     */\n\n  }, {\n    key: \"updateWillBeHiddenItemHeightsAndState\",\n    value: function updateWillBeHiddenItemHeightsAndState(firstShownItemIndex, lastShownItemIndex) {\n      var i = this.getState().firstShownItemIndex;\n\n      while (i <= this.getState().lastShownItemIndex) {\n        if (i >= firstShownItemIndex && i <= lastShownItemIndex) {// The item's still visible.\n        } else {\n          // Update item's height before hiding it\n          // because the height of the item may have changed\n          // while it was visible.\n          this.updateItemHeight(i); // // Update item's state because it's about to be hidden.\n          // if (this.getItemState) {\n          // \tthis.getState().itemStates[i] = this.getItemState(\n          // \t\tthis.getState().items[i],\n          // \t\ti,\n          // \t\tthis.getState().items\n          // \t)\n          // }\n        }\n\n        i++;\n      }\n    }\n    /**\r\n     * Updates the \"from\" and \"to\" shown item indexes.\r\n     * `callback(status)` is called after it re-renders.\r\n     * If the list isn't visible then `status` is `-1`.\r\n     * If the list is visible and some of the items being shown\r\n     * are new and required to be measured first then `status` is `1`.\r\n     * If the list is visible and all items being shown\r\n     * have been encountered (and measured) before then `status` is `0`.\r\n     * @param {Function} callback\r\n     */\n\n  }, {\n    key: \"onDoneUpdatingItemIndexes\",\n    value: function onDoneUpdatingItemIndexes() {\n      this.isUpdatingItemIndexes = false;\n\n      if (this.restoreScrollAfterPrepend) {\n        this.restoreScroll();\n      }\n    }\n  }, {\n    key: \"captureScroll\",\n    value: function captureScroll(previousItems, nextItems, firstPreviousItemIndex) {\n      // If there were no items in the list\n      // then there's no point in restoring scroll position.\n      if (previousItems.length === 0) {\n        return;\n      }\n\n      if (firstPreviousItemIndex === undefined) {\n        firstPreviousItemIndex = nextItems.indexOf(previousItems[0]);\n      } // If the items update wasn't incremental\n      // then there's no point in restoring scroll position.\n\n\n      if (firstPreviousItemIndex < 0) {\n        return;\n      } // If no items were prepended then no need to restore scroll position.\n\n\n      if (firstPreviousItemIndex === 0) {\n        return;\n      } // The first item DOM Element must be rendered in order to get its top position.\n\n\n      if (this.getState().firstShownItemIndex > 0) {\n        return;\n      } // If the scroll position for these `previousItems` -> `nextItems`\n      // has already been captured then skip.\n      // This could happen when using `<ReactVirtualScroller/>`\n      // because it calls `.captureScroll()` inside `.render()`\n      // which is followed by `<VirtualScroller/>`'s `.componentDidUpdate()`\n      // which also alls `.captureScroll()` with the same arguments.\n      // (this is done to prevent scroll Y position from jumping\n      //  when showing the first page of the \"Previous items\",\n      //  see the comments in `<ReactVirtualScroller/>`'s `.render()` method).\n\n\n      if (this.restoreScrollAfterPrepend && this.restoreScrollAfterPrepend.previousItems === previousItems && this.restoreScrollAfterPrepend.nextItems === nextItems) {\n        return;\n      }\n\n      this.restoreScrollAfterPrepend = {\n        previousItems: previousItems,\n        nextItems: nextItems,\n        index: firstPreviousItemIndex,\n        screenTop: this.getItemElement(0).getBoundingClientRect().top\n      };\n    }\n  }, {\n    key: \"updateLayout\",\n    value: function updateLayout(reason) {\n      log(\"~ Update layout (\".concat(reason, \") ~\"));\n      this.isUpdatingItemIndexes = true;\n      this.updateShownItemIndexesRecursive();\n    }\n  }, {\n    key: \"updateItems\",\n\n    /**\r\n     * Updates `items`. Can either prepend or append new items to the list.\r\n     * @param  {any[]} newItems\r\n     * @param  {object} [newCustomState] — If `customState` was passed to `getInitialState()`, this `newCustomState` updates it.\r\n     */\n    value: function updateItems(newItems, newCustomState) {\n      var _this2 = this;\n\n      var _this$getState6 = this.getState(),\n          previousItems = _this$getState6.items;\n\n      var _this$getState7 = this.getState(),\n          firstShownItemIndex = _this$getState7.firstShownItemIndex,\n          lastShownItemIndex = _this$getState7.lastShownItemIndex,\n          beforeItemsHeight = _this$getState7.beforeItemsHeight,\n          afterItemsHeight = _this$getState7.afterItemsHeight,\n          itemStates = _this$getState7.itemStates,\n          itemHeights = _this$getState7.itemHeights,\n          itemSpacing = _this$getState7.itemSpacing;\n\n      log('~ Update items ~');\n\n      var _getItemsDiff = getItemsDiff(previousItems, newItems),\n          prependedItemsCount = _getItemsDiff.prependedItemsCount,\n          appendedItemsCount = _getItemsDiff.appendedItemsCount;\n\n      if (prependedItemsCount > 0 || appendedItemsCount > 0) {\n        if (prependedItemsCount > 0) {\n          log('Prepended items count', prependedItemsCount);\n          itemHeights = new Array(prependedItemsCount).concat(itemHeights);\n          this.itemHeights.onPrepend(prependedItemsCount);\n\n          if (itemStates) {\n            itemStates = new Array(prependedItemsCount).concat(itemStates);\n          } // Since some items were prepended restore scroll Y\n          // position after showing those items.\n\n\n          this.captureScroll(previousItems, newItems, prependedItemsCount);\n        }\n\n        if (appendedItemsCount > 0) {\n          log('Appended items count', appendedItemsCount);\n          itemHeights = itemHeights.concat(new Array(appendedItemsCount));\n\n          if (itemStates) {\n            itemStates = itemStates.concat(new Array(appendedItemsCount));\n          }\n        }\n\n        firstShownItemIndex += prependedItemsCount;\n        lastShownItemIndex += prependedItemsCount;\n        beforeItemsHeight += this.itemHeights.getAverage() * prependedItemsCount;\n        afterItemsHeight += this.itemHeights.getAverage() * appendedItemsCount;\n      } else {\n        log('Non-incremental items update');\n        log('Previous items', previousItems);\n        log('New items', newItems);\n        this.itemHeights = new ItemHeights(this.getContainerNode, newItems.length, this.getState);\n        itemHeights = new Array(newItems.length);\n        itemStates = new Array(newItems.length);\n\n        if (newItems.length === 0) {\n          firstShownItemIndex = undefined;\n          lastShownItemIndex = undefined;\n        } else {\n          firstShownItemIndex = 0;\n          lastShownItemIndex = this.getLastShownItemIndex(firstShownItemIndex, newItems.length);\n        }\n\n        beforeItemsHeight = 0;\n        afterItemsHeight = 0;\n      }\n\n      var customState;\n\n      if (newCustomState) {\n        if (typeof newCustomState === 'function') {\n          customState = newCustomState(this.getState(), {\n            prependedCount: isIncrementalUpdate ? undefined : prependedItemsCount,\n            appendedCount: isIncrementalUpdate ? undefined : appendedItemsCount\n          });\n        } else {\n          customState = newCustomState;\n        }\n      }\n\n      this.setState(_objectSpread({}, customState, {\n        items: newItems,\n        itemStates: itemStates,\n        itemHeights: itemHeights,\n        firstShownItemIndex: firstShownItemIndex,\n        lastShownItemIndex: lastShownItemIndex,\n        beforeItemsHeight: beforeItemsHeight,\n        afterItemsHeight: afterItemsHeight\n      }), function () {\n        _this2.onUpdateShownItemIndexes({\n          reason: 'update items',\n          force: true\n        });\n      });\n    }\n  }, {\n    key: \"getItemElement\",\n    value: function getItemElement(i) {\n      return this.getContainerNode().childNodes[i];\n    } // Turns out this optimization won't work\n    // because sometimes item height is an average approximation\n    // and the other times it's the real item height\n    // and sometimes it can change while item's not visible.\n    // /**\n    //  * Measures new \"before\" items height.\n    //  * @param  {number} firstShownItemIndex — New first shown item index.\n    //  * @param  {number} lastShownItemIndex — New last shown item index.\n    //  * @return {number}\n    //  */\n    // getBeforeItemsHeightOptimized(firstShownItemIndex, lastShownItemIndex) {\n    // \t// If the previous and new shown item indexes intersect\n    // \t// then the new \"before\" items height may be calculated\n    // \t// based on the previous \"before\" items height.\n    // \tif (this.getState().averageItemHeight !== undefined &&\n    // \t\tthis.doPrevAndNextItemIndexesIntersect(firstShownItemIndex, lastShownItemIndex)) {\n    // \t\tlet beforeItemsHeight = this.getState().beforeItemsHeight\n    // \t\t// Add all \"before\" will-be-hidden items' height.\n    // \t\tlet i = this.getState().firstShownItemIndex\n    // \t\twhile (i <= this.getState().lastShownItemIndex && i < firstShownItemIndex) {\n    // \t\t\tbeforeItemsHeight += (this.itemHeights.get(i) || this.itemHeights.getAverage())\n    // \t\t\tbeforeItemsHeight += this.getItemSpacing()\n    // \t\t\ti++\n    // \t\t}\n    // \t\t// Subtract all \"before\" will-be-shown items' height.\n    // \t\ti = firstShownItemIndex\n    // \t\twhile (i <= lastShownItemIndex && i < this.getState().firstShownItemIndex) {\n    // \t\t\tbeforeItemsHeight -= (this.itemHeights.get(i) || this.itemHeights.getAverage())\n    // \t\t\tbeforeItemsHeight -= this.getItemSpacing()\n    // \t\t\ti++\n    // \t\t}\n    // \t\treturn beforeItemsHeight\n    // \t}\n    // \t// If the previous and new shown item indexes don't intersect\n    // \t// then re-calculate \"before\" items height.\n    // \telse {\n    // \t\treturn this.getBeforeItemsHeight(firstShownItemIndex, lastShownItemIndex)\n    // \t}\n    // }\n    // Turns out this optimization won't work\n    // because sometimes item height is an average approximation\n    // and the other times it's the real item height\n    // and sometimes it can change while item's not visible.\n    // /**\n    //  * Measures new \"after\" items height.\n    //  * @param  {number} firstShownItemIndex — New first shown item index.\n    //  * @param  {number} lastShownItemIndex — New last shown item index.\n    //  * @return {number}\n    //  */\n    // getAfterItemsHeightOptimized(firstShownItemIndex, lastShownItemIndex) {\n    // \t// If the previous and new shown item indexes intersect\n    // \t// then the new \"after\" items height may be calculated\n    // \t// based on the previous \"after\" items height.\n    // \tif (this.getState().averageItemHeight !== undefined &&\n    // \t\tthis.doPrevAndNextItemIndexesIntersect(firstShownItemIndex, lastShownItemIndex)) {\n    // \t\tlet afterItemsHeight = this.getState().afterItemsHeight\n    // \t\t// Add all \"after\" will-be-hidden items' height.\n    // \t\tlet i = this.getState().lastShownItemIndex\n    // \t\twhile (i >= this.getState().firstShownItemIndex && i > lastShownItemIndex) {\n    // \t\t\tafterItemsHeight += (this.itemHeights.get(i) || this.itemHeights.getAverage())\n    // \t\t\tafterItemsHeight += this.getItemSpacing()\n    // \t\t\ti--\n    // \t\t}\n    // \t\t// Subtract all \"after\" will-be-shown items' height.\n    // \t\ti = lastShownItemIndex\n    // \t\twhile (i >= firstShownItemIndex && i > this.getState().lastShownItemIndex) {\n    // \t\t\tafterItemsHeight -= (this.itemHeights.get(i) || this.itemHeights.getAverage())\n    // \t\t\tafterItemsHeight -= this.getItemSpacing()\n    // \t\t\ti--\n    // \t\t}\n    // \t\treturn afterItemsHeight\n    // \t}\n    // \t// If the previous and new shown item indexes don't intersect\n    // \t// then re-calculate \"after\" items height.\n    // \telse {\n    // \t\treturn this.getAfterItemsHeight(firstShownItemIndex, lastShownItemIndex)\n    // \t}\n    // }\n    // Was used it `.getBeforeItemsHeightOptimized()` and `.getAfterItemsHeightOptimized()`.\n    // doPrevAndNextItemIndexesIntersect(firstShownItemIndex, lastShownItemIndex) {\n    // \treturn firstShownItemIndex <= this.getState().lastShownItemIndex &&\n    // \t\tlastShownItemIndex >= this.getState().firstShownItemIndex\n    // }\n    // Not implementing the \"delayed\" layout feature for now.\n    // delayLayout(args) {\n    // \t// Suppose there's a \"router\" library which restores scroll position\n    // \t// on \"Back\" navigation but only does so after `componentDidMount()`\n    // \t// is called on the underlying page meaning that by the time\n    // \t// the scroll position is restored the `VirtualScroller` component\n    // \t// has already rendered with previous page's scroll position\n    // \t// resulting in an unnecessary layout. \"Delaying\" layout\n    // \t// means that the layout is called in a `setTimeout(..., 0)` call\n    // \t// rather than immediately on mount.\n    // \tif (this.shouldDelayLayout) {\n    // \t\tthis.layoutDelayedWithArgs = args\n    // \t\t// Then in `.onMount()`:\n    // \t\t// if (this.layoutDelayedWithArgs) {\n    // \t\t// \tthis.shouldDelayLayout = false\n    // \t\t// \tsetTimeout(() => {\n    // \t\t// \t\tif (this.isMounted) {\n    // \t\t// \t\t\tthis.onUpdateShownItemIndexes(this.layoutDelayedWithArgs)\n    // \t\t// \t\t\tthis.layoutDelayedWithArgs = undefined\n    // \t\t// \t\t}\n    // \t\t// \t}, 0)\n    // \t\t// }\n    // \t\treturn true\n    // \t}\n    // }\n\n  }]);\n\n  return VirtualScroller;\n}();\n\nexport { VirtualScroller as default };\n\nfunction getRemainderRest(n, divider) {\n  var remainder = n % divider;\n\n  if (remainder > 0) {\n    return divider - remainder;\n  }\n\n  return 0;\n}\n\nexport function getItemsDiff(previousItems, newItems) {\n  var firstPreviousItemIndex = -1;\n  var lastPreviousItemIndex = -1;\n\n  if (previousItems.length > 0) {\n    firstPreviousItemIndex = newItems.indexOf(previousItems[0]);\n\n    if (firstPreviousItemIndex >= 0) {\n      if (newItems.length >= firstPreviousItemIndex + previousItems.length && newItems[firstPreviousItemIndex + previousItems.length - 1] === previousItems[previousItems.length - 1]) {\n        lastPreviousItemIndex = firstPreviousItemIndex + previousItems.length - 1;\n      }\n    }\n  }\n\n  var isIncrementalUpdate = firstPreviousItemIndex >= 0 && lastPreviousItemIndex >= 0;\n\n  if (isIncrementalUpdate) {\n    return {\n      prependedItemsCount: firstPreviousItemIndex,\n      appendedItemsCount: newItems.length - (lastPreviousItemIndex + 1)\n    };\n  }\n\n  return {\n    prependedItemsCount: -1,\n    appendedItemsCount: -1\n  };\n}\n//# sourceMappingURL=VirtualScroller.js.map"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","hasOwnProperty","Object","is","x","y","getScrollY","window","pageYOffset","getScreenHeight","innerHeight","_toConsumableArray","arr","Array","isArray","i","arr2","length","_arrayWithoutHoles","iter","toString","call","from","_iterableToArray","TypeError","_nonIterableSpread","log","isDebug","_console","_len","arguments","args","_key","console","apply","concat","VirtualScrollerDebug","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","ItemHeights","getContainerNode","itemsCount","getState","instance","Constructor","_classCallCheck","this","measuredItemsHeight","itemHeights","undefined","firstMeasuredItemIndex","lastMeasuredItemIndex","protoProps","staticProps","value","firstShownItemIndex","container","nodeIndex","childNodes","getBoundingClientRect","height","firstItem","secondItem","firstItemRect","spacing","top","fromIndex","toIndex","itemSpacing","getItemSpacing","previousAverageItemHeight","averageItemHeight","previousAverageItemHeightSamplesCount","previousFirstMeasuredItemIndex","previousLastMeasuredItemIndex","firstMeasuredItemIndexHasBeenUpdated","_getItemHeight","set","updateAverageItemHeight","previousHeight","get","averageItemHeightSamplesCount","count","_objectSpread","source","ownKeys","keys","getOwnPropertySymbols","filter","sym","getOwnPropertyDescriptor","forEach","_defineProperty","VirtualScroller","items","_this","options","onUpdateShownItemIndexes","reason","callback","element","onScreenCoordinates","documentLeftBorderWidth","documentTopBorderWidth","scrollY","scrollX","_getOffset","document","clientLeft","body","clientTop","pageXOffset","left","width","_getScreenBounds","bottom","getScreenBounds","screenTop","screenBottom","latestLayoutScreenTopAfterMargin","getMargin","latestLayoutScreenBottomAfterMargin","_this$getItemIndexes","getItemIndexes","lastShownItemIndex","redoLayoutAfterRender","beforeItemsHeight","getBeforeItemsHeight","afterItemsHeight","getAfterItemsHeight","updateWillBeHiddenItemHeightsAndState","getAverage","onShowItems","setState","updateShownItemIndexes","status","setTimeout","isMounted","updateShownItemIndexesRecursive","onDoneUpdatingItemIndexes","_this$restoreScrollAf","restoreScrollAfterPrepend","index","scrollByY","getItemElement","scrollTo","_ref","force","getItemsCount","isUpdatingItemIndexes","clearTimeout","onUserStopsScrollingTimeout","forceRender","onUserStoppedScrolling","updateLayout","onStateChange","estimatedItemHeight","onLastSeenItemIndexChange","state","initialItems","lastSeenItemIndex","firstChild","removeChild","clearElement","prevState","objA","objB","keysA","keysB","shallowEqual","onUpdate","getInitialState","customState","Math","min","getLastShownItemIndex","itemStates","getEstimatedItemHeight","ceil","getEstimatedItemsCount","getEstimatedItemsCountOnScreen","_this$getState","updateItemHeights","addEventListener","onScroll","onResize","removeEventListener","_this$getState2","update","updateItemHeight","itemState","JSON","stringify","newHeight","listTop","showItemsFromIndex","showItemsToIndex","itemsHeight","heightLeft","batchSize","getInvisibleItemIndexes","indexes","getVisibleItemIndexes","restoreScroll","previousItems","nextItems","firstPreviousItemIndex","indexOf","newItems","newCustomState","_this2","_this$getState7","_getItemsDiff","lastPreviousItemIndex","prependedItemsCount","appendedItemsCount","getItemsDiff","onPrepend","captureScroll","prependedCount","isIncrementalUpdate","appendedCount"],"mappings":"qMAiBA,SAASA,EAAQC,GAAwT,OAAtOD,EAArD,mBAAXE,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBF,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXC,QAAyBD,EAAIG,cAAgBF,QAAUD,IAAQC,OAAOG,UAAY,gBAAkBJ,IAAyBA,GAExV,IAAIK,EAAiBC,OAAOF,UAAUC,eAMtC,SAASE,EAAGC,EAAGC,GAEb,OAAID,IAAMC,EAIK,IAAND,GAAiB,IAANC,GAAW,EAAID,GAAM,EAAIC,EAGpCD,GAAMA,GAAKC,GAAMA,ECVrB,SAASC,IAEd,OAAOC,OAAOC,YAOT,SAASC,IACd,OAAOF,OAAOG,YClChB,SAASC,EAAmBC,GAAO,OAMnC,SAA4BA,GAAO,GAAIC,MAAMC,QAAQF,GAAM,CAAE,IAAK,IAAIG,EAAI,EAAGC,EAAO,IAAIH,MAAMD,EAAIK,QAASF,EAAIH,EAAIK,OAAQF,IAAOC,EAAKD,GAAKH,EAAIG,GAAM,OAAOC,GANnHE,CAAmBN,IAI7D,SAA0BO,GAAQ,GAAItB,OAAOC,YAAYI,OAAOiB,IAAkD,uBAAzCjB,OAAOF,UAAUoB,SAASC,KAAKF,GAAgC,OAAON,MAAMS,KAAKH,GAJrFI,CAAiBX,IAEtF,WAAgC,MAAM,IAAIY,UAAU,mDAF0CC,GAQ/E,SAASC,IACtB,GAAIC,IAAW,CAGb,IAFA,IAAIC,EAEKC,EAAOC,UAAUb,OAAQc,EAAO,IAAIlB,MAAMgB,GAAOG,EAAO,EAAGA,EAAOH,EAAMG,IAC/ED,EAAKC,GAAQF,UAAUE,IAGxBJ,EAAWK,SAASP,IAAIQ,MAAMN,EAAUjB,EAAmB,CAAC,sBAAsBwB,OAAOJ,MAGvF,SAASJ,IACd,MAAyB,oBAAXpB,QAA0BA,OAAO6B,qBClBjD,SAASC,EAAkBC,EAAQC,GAAS,IAAK,IAAIxB,EAAI,EAAGA,EAAIwB,EAAMtB,OAAQF,IAAK,CAAE,IAAIyB,EAAaD,EAAMxB,GAAIyB,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMzC,OAAO0C,eAAeN,EAAQE,EAAWK,IAAKL,IAM7S,IAAIM,EAEJ,WACE,SAASA,EAAYC,EAAkBC,EAAYC,IAXrD,SAAyBC,EAAUC,GAAe,KAAMD,aAAoBC,GAAgB,MAAM,IAAI3B,UAAU,qCAY5G4B,CAAgBC,KAAMP,GAEtBO,KAAKN,iBAAmBA,EACxBM,KAAKJ,SAAWA,EAGhBI,KAAKC,oBAAsB,EAG3B,IAFA,IAAIvC,EAAI,EAEDA,EAAIkC,IAAWM,YAAYtC,QAAQ,CACxC,GAAiCuC,MAA7BP,IAAWM,YAAYxC,IACzB,QAAoCyC,IAAhCH,KAAKI,uBAAsC,CAC7CJ,KAAKK,sBAAwB3C,EAAI,EACjC,iBAGkCyC,IAAhCH,KAAKI,yBACPJ,KAAKI,uBAAyB1C,GAGhCsC,KAAKC,qBAAuBL,IAAWM,YAAYxC,GAGrDA,KA/BN,IAAsBoC,EAAaQ,EAAYC,EA2N7C,OA3NoBT,EA+CPL,GA/CoBa,EA+CP,CAAC,CACzBd,IAAK,iBACLgB,MAAO,SAAwB9C,EAAG+C,GAChC,IAAIC,EAAYV,KAAKN,mBAErB,GAAIgB,EAAW,CACb,IAAIC,EAAYjD,EAAI+C,EAEpB,GAAIE,GAAa,GAAKA,EAAYD,EAAUE,WAAWhD,OAGrD,OAAO8C,EAAUE,WAAWD,GAAWE,wBAAwBC,UAIpE,CACDtB,IAAK,iBACLgB,MAAO,WACL,IAAIE,EAAYV,KAAKN,mBAErB,GAAIgB,GACEA,EAAUE,WAAWhD,OAAS,EAAG,CACnC,IAAImD,EAAYL,EAAUE,WAAW,GACjCI,EAAaN,EAAUE,WAAW,GAClCK,EAAgBF,EAAUF,wBAE1BK,EADiBF,EAAWH,wBACHM,KAAOF,EAAcE,IAAMF,EAAcH,QAMtE,OAJI5D,OAAO6B,sBACTV,EAAI,eAAgB6C,GAGfA,KAWZ,CACD1B,IAAK,SACLgB,MAAO,SAAgBY,EAAWC,EAASZ,QACLN,IAAhCH,KAAKJ,WAAW0B,cAClBtB,KAAKJ,WAAW0B,YAActB,KAAKuB,uBAIDpB,IAAhCH,KAAKI,yBACHgB,EAAYpB,KAAKK,sBAAwB,GAAKgB,EAAUrB,KAAKI,uBAAyB,KAGxFJ,KAAKwB,0BAA4BxB,KAAKyB,kBACtCzB,KAAK0B,sCAAwC1B,KAAKK,sBAAwBL,KAAKI,uBAAyB,EAExGJ,KAAKC,oBAAsB,EAC3BD,KAAKI,4BAAyBD,EAC9BH,KAAKK,2BAAwBF,GASjC,IALA,IAAIwB,EAAiC3B,KAAKI,uBACtCwB,EAAgC5B,KAAKK,sBACrCwB,GAAuC,EACvCnE,EAAI0D,EAED1D,GAAK2D,GAAS,CAOnB,IAAIP,EAASd,KAAK8B,eAAepE,EAAG+C,QAErBN,IAAXW,IACFd,KAAK+B,IAAIrE,EAAGoD,SAE2BX,IAAnCwB,GAAgDjE,EAAIiE,KACtD3B,KAAKC,qBAAuBa,EAEvBe,IACH7B,KAAKI,uBAAyB1C,EAC9BmE,GAAuC,UAKL1B,IAAlCyB,GAA+ClE,EAAIkE,UAIfzB,IAAlCyB,IACF5B,KAAKC,qBAAuBa,GAI9Bd,KAAKK,sBAAwB3C,IAKjCA,IAIFsC,KAAKgC,4BAEN,CACDxC,IAAK,mBACLgB,MAAO,SAA0B9C,EAAG+C,GAClC,IAAIwB,EAAiBjC,KAAKkC,IAAIxE,GAE1BoD,EAASd,KAAK8B,eAAepE,EAAG+C,QAQbN,IAAnB8B,QAA2C9B,IAAXW,IAIpCd,KAAK+B,IAAIrE,EAAGoD,GACZd,KAAKC,qBAAuBa,EAASmB,KAEtC,CACDzC,IAAK,0BACLgB,MAAO,WACLR,KAAKmC,8BAAgCnC,KAAKK,sBAAwBL,KAAKI,uBAAyB,EAChGJ,KAAKyB,kBAAoBzB,KAAKC,oBAAsBD,KAAKmC,gCAI1D,CACD3C,IAAK,aACLgB,MAAO,WAGL,OAAIR,KAAKwB,2BACHxB,KAAK0B,sCAAwC1B,KAAKmC,8BAC7CnC,KAAKwB,0BAITxB,KAAKyB,mBAAqB,IAElC,CACDjC,IAAK,MACLgB,MAAO,SAAa9C,GAClB,OAAOsC,KAAKJ,WAAWM,YAAYxC,KAEpC,CACD8B,IAAK,MACLgB,MAAO,SAAa9C,EAAGoD,GACrBd,KAAKJ,WAAWM,YAAYxC,GAAKoD,IAElC,CACDtB,IAAK,YACLgB,MAAO,SAAmB4B,QACYjC,IAAhCH,KAAKI,yBACPJ,KAAKI,wBAA0BgC,EAC/BpC,KAAKK,uBAAyB+B,QAtNwCpD,EAAkBc,EAAYnD,UAAW2D,GAAiBC,GAAavB,EAAkBc,EAAaS,GA2N3Kd,EArNT,GCVA,SAAS4C,EAAcpD,GAAU,IAAK,IAAIvB,EAAI,EAAGA,EAAIe,UAAUb,OAAQF,IAAK,CAAE,IAAI4E,EAAyB,MAAhB7D,UAAUf,GAAae,UAAUf,GAAK,GAAQ6E,EAAU1F,OAAO2F,KAAKF,GAAqD,mBAAjCzF,OAAO4F,wBAAwCF,EAAUA,EAAQzD,OAAOjC,OAAO4F,sBAAsBH,GAAQI,OAAO,SAAUC,GAAO,OAAO9F,OAAO+F,yBAAyBN,EAAQK,GAAKvD,eAAmBmD,EAAQM,QAAQ,SAAUrD,GAAOsD,EAAgB7D,EAAQO,EAAK8C,EAAO9C,MAAa,OAAOP,EAIxd,SAASD,EAAkBC,EAAQC,GAAS,IAAK,IAAIxB,EAAI,EAAGA,EAAIwB,EAAMtB,OAAQF,IAAK,CAAE,IAAIyB,EAAaD,EAAMxB,GAAIyB,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMzC,OAAO0C,eAAeN,EAAQE,EAAWK,IAAKL,IAI7S,SAAS2D,EAAgBvG,EAAKiD,EAAKgB,GAAiK,OAApJhB,KAAOjD,EAAOM,OAAO0C,eAAehD,EAAKiD,EAAK,CAAEgB,MAAOA,EAAOpB,YAAY,EAAMC,cAAc,EAAMC,UAAU,IAAkB/C,EAAIiD,GAAOgB,EAAgBjE,SAU3M,WAOE,SAASwG,EAAgBrD,EAAkBsD,GACzC,IAAIC,EAAQjD,KAERkD,EAAUzE,UAAUb,OAAS,QAAsBuC,IAAjB1B,UAAU,GAAmBA,UAAU,GAAK,IA1BtF,SAAyBoB,EAAUC,GAAe,KAAMD,aAAoBC,GAAgB,MAAM,IAAI3B,UAAU,qCA4B5G4B,CAAgBC,KAAM+C,GAEtBD,EAAgB9C,KAAM,WAAY,WAChC,OAAOiD,EAAME,yBAAyB,CACpCC,OAAQ,aAIZN,EAAgB9C,KAAM,WAAY,WAChC,OAAOiD,EAAME,yBAAyB,CACpCC,OAAQ,aAIZN,EAAgB9C,KAAM,yBAA0B,SAAUqD,GAUxD,IHhDoBC,EAGpBC,EACAC,EACAC,EAEAC,EACAC,EGwCIC,GHhDgBN,EGgDOL,EAAMvD,mBH7CjC6D,EAAsBD,EAAQzC,wBAC9B2C,EAA0BK,SAASC,YAAcD,SAASE,KAAKD,YAAc,EAC7EL,EAAyBI,SAASG,WAAaH,SAASE,KAAKC,WAAa,EAE1EN,EAAUxG,OAAOC,YACjBwG,EAAUzG,OAAO+G,YAGd,CACL9C,IAHQoC,EAAoBpC,IAAMuC,EAAUD,EAI5CS,KAHSX,EAAoBW,KAAOP,EAAUH,EAI9CW,MAAOZ,EAAoBY,MAC3BrD,OAAQyC,EAAoBzC,SGkCtBK,EAAMyC,EAAWzC,IACjBL,EAAS8C,EAAW9C,OAEpBsD,EHtBH,WACL,IAAItD,EAAS1D,IACb,MAAO,CAEL+D,IAAKlE,IAELoH,OAAQpH,IAAe6D,EACvBA,OAAQA,GGeiBwD,GACnBC,EAAYH,EAAiBjD,IAC7BqD,EAAeJ,EAAiBC,OAGpCpB,EAAMwB,iCAAmCF,EAAYtB,EAAMyB,YAC3DzB,EAAM0B,oCAAsCH,EAAevB,EAAMyB,YAEjE,IAAIE,EAAuB3B,EAAM4B,eAAeN,EAAYtB,EAAMyB,YAAaF,EAAevB,EAAMyB,YAAavD,EAAKA,EAAML,GACxHL,EAAsBmE,EAAqBnE,oBAC3CqE,EAAqBF,EAAqBE,mBAC1CC,EAAwBH,EAAqBG,sBAG7CC,EAAoB/B,EAAMgC,qBAAqBxE,EAAqBqE,GAGpEI,EAAmBjC,EAAMkC,oBAAoB1E,EAAqBqE,GAOtE7B,EAAMmC,sCAAsC3E,EAAqBqE,GAGjEzG,EAAI,sBACJA,EAAI,yBAA0BoC,GAC9BpC,EAAI,wBAAyByG,GAC7BzG,EAAI,sBAAuB2G,GAC3B3G,EAAI,qBAAsB6G,GAC1B7G,EAAI,4CAA6C4E,EAAM/C,YAAYmF,cAE/DN,GACF1G,EAAI,4BAIN4E,EAAMqC,YAAY7E,EAAqBqE,GAGvC7B,EAAMsC,SAAS,CACb9E,oBAAqBA,EACrBqE,mBAAoBA,EACpBE,kBAAmBA,EACnBE,iBAAkBA,GAIjB,WACD,OAAO7B,EAAS0B,EAAwB,EAAI,OAIhDjC,EAAgB9C,KAAM,kCAAmC,WACvDiD,EAAMuC,uBAAuB,SAAUC,GACtB,IAAXA,EAMFC,WAAW,WACLzC,EAAM0C,UACR1C,EAAM2C,kCAEN3C,EAAM4C,8BAIV5C,EAAM4C,gCAKZ/C,EAAgB9C,KAAM,gBAAiB,WACrC,IAAI8F,EAAwB7C,EAAM8C,0BAC9BC,EAAQF,EAAsBE,MAC9BzB,EAAYuB,EAAsBvB,UACtCtB,EAAM8C,+BAA4B5F,EAElC,IAEI8F,EAFehD,EAAMiD,eAAeF,GAAOnF,wBAAwBM,IAExCoD,EAEb,IAAd0B,IACF5H,EAAI,qCAAsC4H,GAC1C/I,OAAOiJ,SAAS,EAAGlJ,IAAegJ,MAItCnD,EAAgB9C,KAAM,2BAA4B,SAAUoG,GAC1D,IAAIhD,EAASgD,EAAKhD,OACNgD,EAAKC,MASjB,GAA8B,IAA1BpD,EAAMqD,kBAMNrD,EAAMsD,sBAAV,CAaA,GAFAC,aAAavD,EAAMwD,6BAEJ,WAAXrD,EAAqB,CAWvB,IAAIsD,OACuCvG,IAA3C8C,EAAMwB,kCACNxH,IAAegG,EAAMwB,kCACrBxB,EAAMrD,WAAWa,oBAAsB,QACON,IAA9C8C,EAAM0B,qCACN1H,IAAeG,IAAoB6F,EAAM0B,qCACzC1B,EAAMrD,WAAWkF,mBAAqB7B,EAAMqD,gBAAkB,EAa9D,GAVEjI,EADEqI,EACE,oDAEA,uDAQDA,EACH,OAAOzD,EAAMwD,4BAA8Bf,WAAWzC,EAAM0D,uBAAwB,KAOxF1D,EAAM2D,aAAaxD,MAGrBN,EAAgB9C,KAAM,yBAA0B,WAC1CiD,EAAM0C,WAER1C,EAAM2D,aAAa,uBAIvB,IAAIhH,EAAWsD,EAAQtD,SACnB2F,EAAWrC,EAAQqC,SACnBsB,EAAgB3D,EAAQ2D,cACxBC,EAAsB5D,EAAQ4D,oBAC9BC,EAA4B7D,EAAQ6D,0BACpCC,EAAQ9D,EAAQ8D,MACpB3I,EAAI,kBAGA2I,IACFhE,EAAQgE,EAAMhE,OAShBhD,KAAKiH,aAAejE,EAEpBhD,KAAK8G,oBAAsBA,EAEvBC,IACF/G,KAAK+G,0BAA4BA,EACjC/G,KAAKkH,mBAAqB,GAMxBxH,KHvOD,SAAsB4D,GAC3B,KAAOA,EAAQ6D,YACb7D,EAAQ8D,YAAY9D,EAAQ6D,YGsO1BE,CAAa3H,KAGX6F,GACFvF,KAAKJ,SAAWA,EAChBI,KAAKuF,SAAWA,IAEhBvF,KAAKJ,SAAW,WACd,OAAOqD,EAAM+D,OAGfhH,KAAKuF,SAAW,SAAUyB,EAAO3D,GAC/B,IAAIiE,EAAYrE,EAAM+D,MACtB/D,EAAM+D,MAAQ3E,EAAc,GAAIiF,EAAWN,GJrOpC,SAAsBO,EAAMC,GACzC,GAAI1K,EAAGyK,EAAMC,GACX,OAAO,EAGT,GAAsB,WAAlBlL,EAAQiL,IAA+B,OAATA,GAAmC,WAAlBjL,EAAQkL,IAA+B,OAATA,EAC/E,OAAO,EAGT,IAAIC,EAAQ5K,OAAO2F,KAAK+E,GACpBG,EAAQ7K,OAAO2F,KAAKgF,GAExB,GAAIC,EAAM7J,SAAW8J,EAAM9J,OACzB,OAAO,EAIT,IAAK,IAAIF,EAAI,EAAGA,EAAI+J,EAAM7J,OAAQF,IAChC,IAAKd,EAAeoB,KAAKwJ,EAAMC,EAAM/J,MAAQZ,EAAGyK,EAAKE,EAAM/J,IAAK8J,EAAKC,EAAM/J,KACzE,OAAO,EAIX,OAAO,EIgNIiK,CAAa1E,EAAM+D,MAAOM,KACzBT,GACFA,EAAc5D,EAAM+D,MAAOM,GAGzBrE,EAAM0C,WACR1C,EAAM2E,SAASN,IAIfjE,GACFA,MAKF2D,GACF3I,EAAI,yBAA0B2I,GAGhChH,KAAKuF,SAASyB,GAAShH,KAAK6H,mBAC5B7H,KAAKN,iBAAmBA,EACxBM,KAAKE,YAAc,IAAIT,EAAYC,EAAkBsD,EAAMpF,OAAQoC,KAAKJ,UACxEvB,EAAI,cAAe2E,EAAMpF,QAErBkJ,GACFzI,EAAI,wBAAyByI,GAvSnC,IAAsBhH,EAAaQ,EAAYC,EAi9B7C,OAj9BoBT,EAiTPiD,GAjToBzC,EAiTH,CAAC,CAC7Bd,IAAK,kBACLgB,MAAO,SAAyBsH,GAC9B,IAAIrH,EACAqE,EACAnF,EAAaK,KAAKiH,aAAarJ,OAE/B+B,EAAa,IACfc,EAAsBsH,KAAKC,IAjTZ,EAiTkCrI,EAAa,GAC9DmF,EAAqB9E,KAAKiI,sBAAsBxH,EAAqBd,IAIvEK,KAAKsF,YAAY7E,EAAqBqE,GAEtC,IAAIkC,EAAQ3E,EAAc,GAAIyF,EAAa,CACzC9E,MAAOhD,KAAKiH,aACZiB,WAAY,IAAI1K,MAAMmC,GACtBO,YAAa,IAAI1C,MAAMmC,GACvB2B,iBAAanB,EACb6E,kBAAmB,EACnBE,iBAAkB,EAClBzE,oBAAqBA,EACrBqE,mBAAoBA,IAMtB,OAHAzG,EAAI,0BAA2B2I,GAC/B3I,EAAI,yBAA0BoC,GAC9BpC,EAAI,wBAAyByG,GACtBkC,IAQR,CACDxH,IAAK,yBACLgB,MAAO,WACL,OAAOR,KAAKE,aAAeF,KAAKE,YAAYmF,cAAgBrF,KAAK8G,qBAAuB,IAEzF,CACDtH,IAAK,iBACLgB,MAAO,WACL,OAAOR,KAAKJ,WAAW0B,aAAe,IAEvC,CACD9B,IAAK,yBACLgB,MAAO,SAAgCM,GACrC,OAAId,KAAKmI,yBACAJ,KAAKK,MAAMtH,EAASd,KAAKuB,mBAAqBvB,KAAKmI,yBAA2BnI,KAAKuB,mBAEnF,IAGV,CACD/B,IAAK,iCACLgB,MAAO,WACL,MAAsB,oBAAXtD,OACF8C,KAAKqI,uBAAuBnL,OAAOG,aAEnC,IAGV,CACDmC,IAAK,wBACLgB,MAAO,SAA+BC,EAAqBd,GACzD,OAAOoI,KAAKC,IAAIvH,GAAuBT,KAAKsI,iCAAmC,GAAI3I,EAAa,KAEjG,CACDH,IAAK,gBACLgB,MAAO,WACL,OAAOR,KAAKJ,WAAWoD,MAAMpF,SAE9B,CACD4B,IAAK,YACLgB,MAAO,WAIL,OAAOtD,OAAOG,cAEf,CACDmC,IAAK,cACLgB,MAAO,SAAqBC,EAAqBqE,GAC3C9E,KAAK+G,2BACHjC,EAAqB9E,KAAKkH,oBAC5BlH,KAAKkH,kBAAoBpC,EACzB9E,KAAK+G,0BAA0B/G,KAAKkH,sBAIzC,CACD1H,IAAK,UACLgB,MAAO,WACL,IAAI+H,EAAiBvI,KAAKJ,WACtBa,EAAsB8H,EAAe9H,oBACrCqE,EAAqByD,EAAezD,mBAGpC9E,KAAKsG,gBAAkB,GAEzBtG,KAAKwI,kBAAkB/H,EAAqBqE,GAG9C9E,KAAK2F,WAAY,EACjB3F,KAAKmD,yBAAyB,CAC5BC,OAAQ,aAEVlG,OAAOuL,iBAAiB,SAAUzI,KAAK0I,UACvCxL,OAAOuL,iBAAiB,SAAUzI,KAAK2I,YAExC,CACDnJ,IAAK,YACLgB,MAAO,WACLR,KAAK2F,WAAY,EACjBzI,OAAO0L,oBAAoB,SAAU5I,KAAK0I,UAC1CxL,OAAO0L,oBAAoB,SAAU5I,KAAK2I,UAC1CnC,aAAaxG,KAAKyG,+BAEnB,CACDjH,IAAK,WACLgB,MAAO,SAAkB8G,GACvB,IAAIuB,EAAkB7I,KAAKJ,WACvBoD,EAAQ6F,EAAgB7F,MACxBvC,EAAsBoI,EAAgBpI,oBACtCqE,EAAqB+D,EAAgB/D,mBAGrCrE,IAAwB6G,EAAU7G,qBAAuBqE,IAAuBwC,EAAUxC,oBAAsB9B,IAAUsE,EAAUtE,OAEtIhD,KAAKwI,kBAAkB/H,EAAqBqE,KAG/C,CACDtF,IAAK,oBACLgB,MAAO,SAA2BY,EAAWC,GAC3C,IACIZ,EADkBT,KAAKJ,WACea,yBAExBN,IAAdiB,GACFpB,KAAKE,YAAY4I,OAAO1H,EAAWC,EAASZ,KAG/C,CACDjB,IAAK,mBACLgB,MAAO,SAA0B9C,GAC/B,IACI+C,EADkBT,KAAKJ,WACea,oBAE1CT,KAAKE,YAAY6I,iBAAiBrL,EAAG+C,KAEtC,CACDjB,IAAK,oBACLgB,MAAO,SAA2B9C,EAAGsL,GAC/B1K,MACFD,EAAI,OAAQX,EAAG,iBACfW,EAAI,mBAA0B4K,KAAKC,UAAUlJ,KAAKJ,WAAWsI,WAAWxK,GAAI,KAAM,IAClFW,EAAI,cAAqB4K,KAAKC,UAAUF,EAAW,KAAM,KAG3DhJ,KAAKJ,WAAWsI,WAAWxK,GAAKsL,IAEjC,CACDxJ,IAAK,qBACLgB,MAAO,SAA4B9C,GACjC,IACIwC,EADkBF,KAAKJ,WACOM,YAE9B+B,EAAiB/B,EAAYxC,GACjCsC,KAAK+I,iBAAiBrL,GACtB,IAAIyL,EAAYjJ,EAAYxC,GAExBuE,IAAmBkH,IACrB9K,EAAI,OAAQX,EAAG,sBAAuBuE,EAAgB,KAAMkH,GAC5DnJ,KAAKmD,yBAAyB,CAC5BC,OAAQ,0BAKb,CACD5D,IAAK,wBACLgB,MAAO,SAA+B+D,EAAWC,EAAc4E,GAO7D,IANA,IAAIC,EACAC,EACAC,EAAc,EACdxE,GAAwB,EACxBrH,EAtea,EAweVA,EAAIsC,KAAKsG,iBAAiB,CAC/B,IAAIxF,EAASd,KAAKE,YAAYgC,IAAIxE,GAGlC,QAAeyC,IAAXW,EAAsB,CACxBzC,EAAI,QAAQS,OAAOpB,EAAG,kEAEKyC,IAAvBkJ,IACFA,EAAqB3L,GAGvB,IAAI8L,EAAahF,GAAgB4E,EAAUG,GACvCE,EAAYzJ,KAAKqI,uBAAuBmB,GAC5CF,EAAmBvB,KAAKC,IAAItK,GAAK+L,EAAY,GAC7CzJ,KAAKsG,gBAAkB,GACvBvB,GAAwB,EACxB,MAmBF,GAhBAwE,GAAezI,OAGYX,IAAvBkJ,GACED,EAAUG,EAAchF,IAC1BlG,EAAI,8CAA+CX,GACnD2L,EAAqB3L,GAKrBA,EAAIsC,KAAKsG,gBAAkB,IAC7BiD,GAAevJ,KAAKuB,kBAIlB6H,EAAUG,EAAc/E,EAAc,CACxCnG,EAAI,6CAA8CX,QAKvByC,IAAvBkJ,IACFC,EAAmB5L,GAGrB,MAGFA,IAyBF,YArB2ByC,IAAvBkJ,QAAyDlJ,IAArBmJ,GAEtCjL,EAAI,qCADJiL,EAAmBtJ,KAAKsG,gBAAkB,GAOxCtG,KAAK+F,4BACHuD,EAAmBtJ,KAAK+F,0BAA0BC,QACpDsD,EAAmBtJ,KAAK+F,0BAA0BC,OAQpDjB,GAAwB,GAGnB,CACLtE,oBAAqB4I,EACrBvE,mBAAoBwE,EACpBvE,sBAAuBA,KAG1B,CACDvF,IAAK,0BACLgB,MAAO,WAEL,MAAO,CACLC,oBA5jBe,EA6jBfqE,mBA7jBe,EA8jBfC,2BAAmD5E,IAA5BH,KAAKE,YAAYgC,IA9jBzB,MAikBlB,CACD1C,IAAK,iBACLgB,MAAO,SAAwB+D,EAAWC,EAAcrD,EAAKkD,GAG3D,KAFgBA,EAASE,GAAapD,EAAMqD,GAG1C,OAAOxE,KAAK0J,0BAId,IAAIC,EAAU3J,KAAK4J,sBAAsBrF,EAAWC,EAAcrD,GAKlE,YAAoChB,IAAhCwJ,EAAQlJ,oBACHT,KAAK0J,0BAGPC,IASR,CACDnK,IAAK,uBACLgB,MAAO,SAA8BC,EAAqBqE,GAKxD,IAJA,IAAIE,EAAoB,EAEpBtH,EAlmBa,EAomBVA,EAAI+C,GACTuE,GAAqBhF,KAAKE,YAAYgC,IAAIxE,IAAMsC,KAAKE,YAAYmF,aACjEL,GAAqBhF,KAAKuB,iBAC1B7D,IAGF,OAAOsH,IASR,CACDxF,IAAK,sBACLgB,MAAO,SAA6BC,EAAqBqE,GAIvD,IAHA,IAAII,EAAmB,EACnBxH,EAAIoH,EAAqB,EAEtBpH,EAAIsC,KAAKsG,iBACdpB,GAAoBlF,KAAKuB,iBACzB2D,GAAoBlF,KAAKE,YAAYgC,IAAIxE,IAAMsC,KAAKE,YAAYmF,aAChE3H,IAGF,OAAOwH,IAUR,CACD1F,IAAK,wCACLgB,MAAO,SAA+CC,EAAqBqE,GAGzE,IAFA,IAAIpH,EAAIsC,KAAKJ,WAAWa,oBAEjB/C,GAAKsC,KAAKJ,WAAWkF,oBACtBpH,GAAK+C,GAAuB/C,GAAKoH,GAKnC9E,KAAK+I,iBAAiBrL,GAUxBA,MAcH,CACD8B,IAAK,4BACLgB,MAAO,WACLR,KAAKuG,uBAAwB,EAEzBvG,KAAK+F,2BACP/F,KAAK6J,kBAGR,CACDrK,IAAK,gBACLgB,MAAO,SAAuBsJ,EAAeC,EAAWC,GAGzB,IAAzBF,EAAclM,cAIauC,IAA3B6J,IACFA,EAAyBD,EAAUE,QAAQH,EAAc,KAKvDE,EAAyB,GAKE,IAA3BA,IAKAhK,KAAKJ,WAAWa,oBAAsB,GAatCT,KAAK+F,2BAA6B/F,KAAK+F,0BAA0B+D,gBAAkBA,GAAiB9J,KAAK+F,0BAA0BgE,YAAcA,IAIrJ/J,KAAK+F,0BAA4B,CAC/B+D,cAAeA,EACfC,UAAWA,EACX/D,MAAOgE,EACPzF,UAAWvE,KAAKkG,eAAe,GAAGrF,wBAAwBM,UAG7D,CACD3B,IAAK,eACLgB,MAAO,SAAsB4C,GAC3B/E,EAAI,oBAAoBS,OAAOsE,EAAQ,QACvCpD,KAAKuG,uBAAwB,EAC7BvG,KAAK4F,oCAEN,CACDpG,IAAK,cAOLgB,MAAO,SAAqB0J,EAAUC,GACpC,IAAIC,EAASpK,KAGT8J,EADkB9J,KAAKJ,WACSoD,MAEhCqH,EAAkBrK,KAAKJ,WACvBa,EAAsB4J,EAAgB5J,oBACtCqE,EAAqBuF,EAAgBvF,mBACrCE,EAAoBqF,EAAgBrF,kBACpCE,EAAmBmF,EAAgBnF,iBACnCgD,EAAamC,EAAgBnC,WAC7BhI,EAAcmK,EAAgBnK,YAChBmK,EAAgB/I,YAElCjD,EAAI,oBAEJ,IAoDIyJ,EApDAwC,EAkNH,SAAsBR,EAAeI,GAC1C,IAAIF,GAA0B,EAC1BO,GAAyB,EAEzBT,EAAclM,OAAS,IACzBoM,EAAyBE,EAASD,QAAQH,EAAc,MAE1B,GACxBI,EAAStM,QAAUoM,EAAyBF,EAAclM,QAAUsM,EAASF,EAAyBF,EAAclM,OAAS,KAAOkM,EAAcA,EAAclM,OAAS,KAC3K2M,EAAwBP,EAAyBF,EAAclM,OAAS,GAO9E,GAF0BoM,GAA0B,GAAKO,GAAyB,EAGhF,MAAO,CACLC,oBAAqBR,EACrBS,mBAAoBP,EAAStM,QAAU2M,EAAwB,IAInE,MAAO,CACLC,qBAAsB,EACtBC,oBAAqB,GA3OCC,CAAaZ,EAAeI,GAC5CM,EAAsBF,EAAcE,oBACpCC,EAAqBH,EAAcG,mBAEnCD,EAAsB,GAAKC,EAAqB,GAC9CD,EAAsB,IACxBnM,EAAI,wBAAyBmM,GAC7BtK,EAAc,IAAI1C,MAAMgN,GAAqB1L,OAAOoB,GACpDF,KAAKE,YAAYyK,UAAUH,GAEvBtC,IACFA,EAAa,IAAI1K,MAAMgN,GAAqB1L,OAAOoJ,IAKrDlI,KAAK4K,cAAcd,EAAeI,EAAUM,IAG1CC,EAAqB,IACvBpM,EAAI,uBAAwBoM,GAC5BvK,EAAcA,EAAYpB,OAAO,IAAItB,MAAMiN,IAEvCvC,IACFA,EAAaA,EAAWpJ,OAAO,IAAItB,MAAMiN,MAI7ChK,GAAuB+J,EACvB1F,GAAsB0F,EACtBxF,GAAqBhF,KAAKE,YAAYmF,aAAemF,EACrDtF,GAAoBlF,KAAKE,YAAYmF,aAAeoF,IAEpDpM,EAAI,gCACJA,EAAI,iBAAkByL,GACtBzL,EAAI,YAAa6L,GACjBlK,KAAKE,YAAc,IAAIT,EAAYO,KAAKN,iBAAkBwK,EAAStM,OAAQoC,KAAKJ,UAChFM,EAAc,IAAI1C,MAAM0M,EAAStM,QACjCsK,EAAa,IAAI1K,MAAM0M,EAAStM,QAER,IAApBsM,EAAStM,QACX6C,OAAsBN,EACtB2E,OAAqB3E,IAErBM,EAAsB,EACtBqE,EAAqB9E,KAAKiI,sBAAsBxH,EAAqByJ,EAAStM,SAGhFoH,EAAoB,EACpBE,EAAmB,GAKjBiF,IAEArC,EAD4B,mBAAnBqC,EACKA,EAAenK,KAAKJ,WAAY,CAC5CiL,eAAgBC,yBAAsB3K,EAAYqK,EAClDO,cAAeD,yBAAsB3K,EAAYsK,IAGrCN,GAIlBnK,KAAKuF,SAASlD,EAAc,GAAIyF,EAAa,CAC3C9E,MAAOkH,EACPhC,WAAYA,EACZhI,YAAaA,EACbO,oBAAqBA,EACrBqE,mBAAoBA,EACpBE,kBAAmBA,EACnBE,iBAAkBA,IAChB,WACFkF,EAAOjH,yBAAyB,CAC9BC,OAAQ,eACRiD,OAAO,QAIZ,CACD7G,IAAK,iBACLgB,MAAO,SAAwB9C,GAC7B,OAAOsC,KAAKN,mBAAmBkB,WAAWlD,QAj2B8BsB,EAAkBc,EAAYnD,UAAW2D,GAAiBC,GAAavB,EAAkBc,EAAaS,GAi9B3KwC,EAr8BT"}