{"version":3,"file":"virtual-scroller-react.js","sources":["../modules/shallowEqual.js","../modules/DOM.js","../modules/log.js","../modules/ItemHeights.js","../modules/VirtualScroller.js","../modules/ReactVirtualScroller.js"],"sourcesContent":["// https://github.com/lodash/lodash/issues/2340\n// https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/shallowEqual.js\n\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @providesModule shallowEqual\r\n * @typechecks\r\n * @flow\r\n */\n\n/*eslint-disable no-self-compare */\n'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\r\n * inlined Object.is polyfill to avoid requiring consumers ship their own\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\r\n */\n\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n/**\r\n * Performs equality by iterating through keys on an object and returning false\r\n * when any key has values which are not strictly equal between the arguments.\r\n * Returns true when the values of all keys are strictly equal.\r\n */\n\n\nexport default function shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (_typeof(objA) !== 'object' || objA === null || _typeof(objB) !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=shallowEqual.js.map","/**\r\n * Returns the DOM element's `top` and `left` offset relative to the document.\r\n * `document` can potentially have margins so this function takes care of that.\r\n * @param  {object} element\r\n * @return {object} `{ top: number, left: number, width: number, height: number }`\r\n */\nexport function getOffset(element) {\n  // Copied from:\n  // http://stackoverflow.com/questions/5598743/finding-elements-position-relative-to-the-document\n  var onScreenCoordinates = element.getBoundingClientRect();\n  var documentLeftBorderWidth = document.clientLeft || document.body.clientLeft || 0;\n  var documentTopBorderWidth = document.clientTop || document.body.clientTop || 0; // `window.scrollY` and `window.scrollX` aren't supported in Internet Explorer.\n\n  var scrollY = window.pageYOffset;\n  var scrollX = window.pageXOffset;\n  var top = onScreenCoordinates.top + scrollY - documentTopBorderWidth;\n  var left = onScreenCoordinates.left + scrollX - documentLeftBorderWidth;\n  return {\n    top: top,\n    left: left,\n    width: onScreenCoordinates.width,\n    height: onScreenCoordinates.height\n  };\n}\nexport function getScrollY() {\n  // `window.scrollY` is not supported by Internet Explorer.\n  return window.pageYOffset;\n}\nexport function clearElement(element) {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\nexport function getScreenHeight() {\n  return window.innerHeight;\n}\nexport function getScreenBounds() {\n  var height = getScreenHeight();\n  return {\n    // The first pixel of the viewport.\n    top: getScrollY(),\n    // The pixel after the last pixel of the viewport.\n    bottom: getScrollY() + height,\n    height: height\n  };\n}\n//# sourceMappingURL=DOM.js.map","function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nexport default function log() {\n  if (isDebug()) {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (_console = console).log.apply(_console, _toConsumableArray(['[virtual-scroller]'].concat(args)));\n  }\n}\nexport function isDebug() {\n  return typeof window !== 'undefined' && window.VirtualScrollerDebug;\n}\n//# sourceMappingURL=log.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport log from './log';\n\nvar ItemHeights =\n/*#__PURE__*/\nfunction () {\n  function ItemHeights(getContainerNode, itemsCount, getState) {\n    _classCallCheck(this, ItemHeights);\n\n    this.getContainerNode = getContainerNode;\n    this.getState = getState; // Initialize `measuredItemsHeight`, `firstMeasuredItemIndex` and `lastMeasuredItemIndex`.\n    // For example, if `state` was supplied to `VirtualScroller`.\n\n    this.measuredItemsHeight = 0;\n    var i = 0;\n\n    while (i < getState().itemHeights.length) {\n      if (getState().itemHeights[i] == undefined) {\n        if (this.firstMeasuredItemIndex !== undefined) {\n          this.lastMeasuredItemIndex = i - 1;\n          break;\n        }\n      } else {\n        if (this.firstMeasuredItemIndex === undefined) {\n          this.firstMeasuredItemIndex = i;\n        }\n\n        this.measuredItemsHeight += getState().itemHeights[i];\n      }\n\n      i++;\n    }\n  } // Seems to be no longer used.\n  // getItemHeight(i, firstShownItemIndex) {\n  // \tif (this.get(i)) {\n  // \t\treturn this.get(i)\n  // \t}\n  // \tconst itemHeight = this._getItemHeight(i, firstShownItemIndex)\n  // \tif (itemHeight) {\n  // \t\tthis.set(i, itemHeight)\n  // \t\treturn itemHeight\n  // \t}\n  // \treturn this.getAverage()\n  // }\n\n\n  _createClass(ItemHeights, [{\n    key: \"_getItemHeight\",\n    value: function _getItemHeight(i, firstShownItemIndex) {\n      var container = this.getContainerNode();\n\n      if (container) {\n        var nodeIndex = i - firstShownItemIndex;\n\n        if (nodeIndex >= 0 && nodeIndex < container.childNodes.length) {\n          // `offsetHeight` is not precise enough (doesn't return fractional pixels).\n          // let height = container.childNodes[nodeIndex].offsetHeight\n          return container.childNodes[nodeIndex].getBoundingClientRect().height;\n        }\n      }\n    }\n  }, {\n    key: \"getItemSpacing\",\n    value: function getItemSpacing() {\n      var container = this.getContainerNode();\n\n      if (container) {\n        if (container.childNodes.length > 1) {\n          var firstItem = container.childNodes[0];\n          var secondItem = container.childNodes[1];\n          var firstItemRect = firstItem.getBoundingClientRect();\n          var secondItemRect = secondItem.getBoundingClientRect();\n          var spacing = secondItemRect.top - (firstItemRect.top + firstItemRect.height); // Debugging.\n\n          if (window.VirtualScrollerDebug) {\n            log('Item spacing', spacing);\n          }\n\n          return spacing;\n        }\n      }\n    }\n    /**\r\n     * Updates item heights and item spacing.\r\n     * @param  {number} fromIndex\r\n     * @param  {number} toIndex\r\n     * @param  {number} firstShownItemIndex\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(fromIndex, toIndex, firstShownItemIndex) {\n      if (this.getState().itemSpacing === undefined) {\n        this.getState().itemSpacing = this.getItemSpacing();\n      } // Reset `this.measuredItemsHeight` if it's not a continuous scroll.\n\n\n      if (this.firstMeasuredItemIndex !== undefined) {\n        if (fromIndex > this.lastMeasuredItemIndex + 1 || toIndex < this.firstMeasuredItemIndex - 1) {\n          // The previously measured average item height might still be\n          // more precise if it contains more measured items (\"samples\").\n          this.previousAverageItemHeight = this.averageItemHeight;\n          this.previousAverageItemHeightSamplesCount = this.lastMeasuredItemIndex - this.firstMeasuredItemIndex + 1; // Reset.\n\n          this.measuredItemsHeight = 0;\n          this.firstMeasuredItemIndex = undefined;\n          this.lastMeasuredItemIndex = undefined;\n        }\n      }\n\n      var previousFirstMeasuredItemIndex = this.firstMeasuredItemIndex;\n      var previousLastMeasuredItemIndex = this.lastMeasuredItemIndex;\n      var firstMeasuredItemIndexHasBeenUpdated = false;\n      var i = fromIndex;\n\n      while (i <= toIndex) {\n        // Recalculate item heights because item height might change\n        // after showing it compared to what it was when hiding it.\n        // For example, a YouTube video might have been expanded\n        // and then the item is hidden and it's state is reset\n        // and when it's shown again the YouTube video is not expanded.\n        // if (this.get(i) === undefined) {\n        var height = this._getItemHeight(i, firstShownItemIndex);\n\n        if (height !== undefined) {\n          this.set(i, height); // Update new items height (before).\n\n          if (previousFirstMeasuredItemIndex === undefined || i < previousFirstMeasuredItemIndex) {\n            this.measuredItemsHeight += height; // Update first measured item index.\n\n            if (!firstMeasuredItemIndexHasBeenUpdated) {\n              this.firstMeasuredItemIndex = i;\n              firstMeasuredItemIndexHasBeenUpdated = true;\n            }\n          } // Update new items height (after).\n\n\n          if (previousLastMeasuredItemIndex === undefined || i > previousLastMeasuredItemIndex) {\n            // If `previousLastMeasuredItemIndex` is `undefined`\n            // then `previousFirstMeasuredItemIndex` is also `undefined`\n            // which means that `this.measuredItemsHeight` has already been updated.\n            if (previousLastMeasuredItemIndex !== undefined) {\n              this.measuredItemsHeight += height;\n            } // Update last measured item index.\n\n\n            this.lastMeasuredItemIndex = i;\n          }\n        } // }\n\n\n        i++;\n      } // Update average item height.\n\n\n      this.updateAverageItemHeight();\n    }\n  }, {\n    key: \"updateItemHeight\",\n    value: function updateItemHeight(i, firstShownItemIndex) {\n      var previousHeight = this.get(i);\n\n      var height = this._getItemHeight(i, firstShownItemIndex); // The items might not have rendered at all,\n      // for example, when using React, because\n      // React performs DOM updates asynchronously\n      // and if the user scrolls fast enough\n      // React might not have rendered the item\n      // since it has become visible till it became no longer visible.\n\n\n      if (previousHeight === undefined || height === undefined) {\n        return;\n      }\n\n      this.set(i, height);\n      this.measuredItemsHeight += height - previousHeight;\n    }\n  }, {\n    key: \"updateAverageItemHeight\",\n    value: function updateAverageItemHeight() {\n      this.averageItemHeightSamplesCount = this.lastMeasuredItemIndex - this.firstMeasuredItemIndex + 1;\n      this.averageItemHeight = this.measuredItemsHeight / this.averageItemHeightSamplesCount;\n    }\n    /* Public API. */\n\n  }, {\n    key: \"getAverage\",\n    value: function getAverage() {\n      // Previously measured average item height might still be\n      // more precise if it contains more measured items (\"samples\").\n      if (this.previousAverageItemHeight) {\n        if (this.previousAverageItemHeightSamplesCount > this.averageItemHeightSamplesCount) {\n          return this.previousAverageItemHeight;\n        }\n      }\n\n      return this.averageItemHeight || 0;\n    }\n  }, {\n    key: \"get\",\n    value: function get(i) {\n      return this.getState().itemHeights[i];\n    }\n  }, {\n    key: \"set\",\n    value: function set(i, height) {\n      this.getState().itemHeights[i] = height;\n    }\n  }, {\n    key: \"onPrepend\",\n    value: function onPrepend(count) {\n      if (this.firstMeasuredItemIndex !== undefined) {\n        this.firstMeasuredItemIndex += count;\n        this.lastMeasuredItemIndex += count;\n      }\n    }\n  }]);\n\n  return ItemHeights;\n}();\n\nexport { ItemHeights as default };\n//# sourceMappingURL=ItemHeights.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shallowEqual from './shallowEqual';\nimport { getOffset, getScrollY, getScreenHeight, getScreenBounds, clearElement } from './DOM';\nimport ItemHeights from './ItemHeights';\nimport log, { isDebug } from './log';\nvar START_FROM_INDEX = 0;\nvar WATCH_CONTAINER_ELEMENT_TOP_COORDINATE_INTERVAL = 1000;\n\nvar VirtualScroller =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * @param  {function} getContainerNode — Returns container DOM `Element`.\r\n   * @param  {any[]} items — Are only used for getting items count and for comparing \"previous\" items to \"next\" items if `.updateItems(newItems)` is called.\r\n   * @param  {Object} [options] — See README.md.\r\n   * @return {VirtualScroller}\r\n   */\n  function VirtualScroller(getContainerNode, items) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, VirtualScroller);\n\n    _defineProperty(this, \"onScroll\", function () {\n      return _this.onUpdateShownItemIndexes({\n        reason: 'scroll'\n      });\n    });\n\n    _defineProperty(this, \"onResize\", function () {\n      return _this.onUpdateShownItemIndexes({\n        reason: 'resize'\n      });\n    });\n\n    _defineProperty(this, \"updateShownItemIndexes\", function (callback) {\n      // Find the items which are displayed in the viewport.\n      var _this$getShownItemInd = _this.getShownItemIndexes(),\n          firstShownItemIndex = _this$getShownItemInd.firstShownItemIndex,\n          lastShownItemIndex = _this$getShownItemInd.lastShownItemIndex,\n          redoLayoutAfterRender = _this$getShownItemInd.redoLayoutAfterRender; // Measure \"before\" items height.\n\n\n      var beforeItemsHeight = _this.getBeforeItemsHeight(firstShownItemIndex, lastShownItemIndex); // Measure \"after\" items height.\n\n\n      var afterItemsHeight = _this.getAfterItemsHeight(firstShownItemIndex, lastShownItemIndex); // Update the heights of items to be hidden on next render.\n      // For example, a user could click a \"Show more\" button,\n      // or an \"Expand YouTube video\" button, which would result\n      // in the list item height changing and `this.itemHeights[i]`\n      // being stale, so it's updated here when hiding the item.\n\n\n      _this.updateWillBeHiddenItemHeightsAndState(firstShownItemIndex, lastShownItemIndex); // Debugging.\n\n\n      log('~ Layout results ' + (_this.bypass ? '(bypass) ' : '') + '~');\n      log('First shown item index', firstShownItemIndex);\n      log('Last shown item index', lastShownItemIndex);\n      log('Before items height', beforeItemsHeight);\n      log('After items height', afterItemsHeight);\n      log('Average item height (calculated on previous render)', _this.itemHeights.getAverage());\n\n      if (isDebug()) {\n        log('Item heights', _this.getState().itemHeights.slice());\n        log('Item states', _this.getState().itemStates.slice());\n      }\n\n      if (redoLayoutAfterRender) {\n        log('Redo layout after render');\n      } // Optionally preload items to be rendered.\n\n\n      _this.onShowItems(firstShownItemIndex, lastShownItemIndex); // Render.\n\n\n      _this.setState({\n        firstShownItemIndex: firstShownItemIndex,\n        lastShownItemIndex: lastShownItemIndex,\n        beforeItemsHeight: beforeItemsHeight,\n        afterItemsHeight: afterItemsHeight // // Average item height is stored in state to differentiate between\n        // // the initial state and \"anything has been measured already\" state.\n        // averageItemHeight: this.itemHeights.getAverage()\n\n      }, function () {\n        return callback(redoLayoutAfterRender);\n      });\n    });\n\n    _defineProperty(this, \"updateShownItemIndexesRecursive\", function () {\n      _this.updateShownItemIndexes(function (redoLayoutAfterRender) {\n        if (redoLayoutAfterRender) {\n          // Recurse in a timeout to prevent React error:\n          // \"Maximum update depth exceeded.\n          //  This can happen when a component repeatedly calls\n          //  setState inside componentWillUpdate or componentDidUpdate.\n          //  React limits the number of nested updates to prevent infinite loops.\"\n          setTimeout(function () {\n            if (_this.isMounted) {\n              _this.updateShownItemIndexesRecursive();\n            } else {\n              _this.onDoneUpdatingItemIndexes();\n            }\n          }, 0);\n        } else {\n          _this.onDoneUpdatingItemIndexes();\n        }\n      });\n    });\n\n    _defineProperty(this, \"restoreScroll\", function () {\n      var _this$restoreScrollAf = _this.restoreScrollAfterPrepend,\n          index = _this$restoreScrollAf.index,\n          screenTop = _this$restoreScrollAf.screenTop;\n      _this.restoreScrollAfterPrepend = undefined;\n\n      var newScreenTop = _this.getItemElement(index).getBoundingClientRect().top;\n\n      var scrollByY = newScreenTop - screenTop;\n\n      if (scrollByY !== 0) {\n        log('Restore scroll position: scroll by', scrollByY);\n        window.scrollTo(0, getScrollY() + scrollByY);\n      }\n    });\n\n    _defineProperty(this, \"onUpdateShownItemIndexes\", function (_ref) {\n      var reason = _ref.reason,\n          force = _ref.force;\n\n      // Not implementing the \"delayed\" layout feature for now.\n      // if (this.delayLayout({ reason, force })) {\n      // \treturn\n      // }\n      //\n      // If there're no items then no need to calculate the layout:\n      // if empty `items` have been set on `state` then it has rendered nothing.\n      if (_this.getItemsCount() === 0) {\n        return;\n      } // If a re-layout is already scheduled then it will happen anyway\n      // for the same `state` so there's no need to start another one.\n\n\n      if (_this.isUpdatingItemIndexes) {\n        return;\n      } // Prefer not re-rendering the list as the user's scrolling.\n      // Instead, prefer delaying such re-renders until the user stops scrolling.\n      //\n      // If the user has scrolled then it means that they haven't\n      // stopped scrolling so cancel the timeout.\n      // Otherwise, a layout happens so no need for the deferred one\n      // so cancel the timeout anyway.\n\n\n      clearTimeout(_this.onUserStopsScrollingTimeout); //\n\n      if (reason === 'scroll') {\n        // See whether rendering new previous/next items is required right now\n        // or it can be deferred until the user stops scrolling for better perceived performance.\n        // const listCoordinates = getOffset(this.getContainerNode())\n        // const { top, height } = listCoordinates\n        // const bottom = top + height\n        // const { top: screenTop, bottom: screenBottom } = getScreenBounds()\n        // const renderedItemsTop = top + this.getState().beforeItemsHeight\n        // const renderedItemsBottom = top + height - this.getState().afterItemsHeight\n        // const forceRender = (screenTop < renderedItemsTop && this.getState().firstShownItemIndex > 0) ||\n        // \t(screenBottom > renderedItemsBottom && this.getState().lastShownItemIndex < this.getItemsCount() - 1)\n        var forceRender = // If the items have been rendered at least one\n        _this.latestLayoutScreenTopAfterMargin !== undefined && // If the user has scrolled up past the extra \"margin\"\n        getScrollY() < _this.latestLayoutScreenTopAfterMargin && // and if there're any previous non-rendered items to render.\n        _this.getState().firstShownItemIndex > 0 || // If the items have been rendered at least one\n        _this.latestLayoutScreenBottomAfterMargin !== undefined && // If the user has scrolled down past the extra \"margin\"\n        getScrollY() + getScreenHeight() > _this.latestLayoutScreenBottomAfterMargin && // and if there're any next non-rendered items to render.\n        _this.getState().lastShownItemIndex < _this.getItemsCount() - 1;\n\n        if (forceRender) {\n          log('The user has scrolled far enough: force re-render');\n        } else {\n          log('The user hasn\\'t scrolled too much: delay re-render');\n        } // \"scroll\" events are usually dispatched every 16 milliseconds\n        // for the 60fps refresh rate, so waiting for 100 milliseconds\n        // is about 6 frames of inactivity which would definitely mean\n        // that either the user's no longer scrolling or the browser's\n        // stuttering (skipping frames due to high load) anyway.\n\n\n        if (!forceRender) {\n          return _this.onUserStopsScrollingTimeout = setTimeout(_this.onUserStoppedScrolling, 100);\n        }\n      } // // A minor optimization. Just because I can.\n      // this.listCoordinatesCached = listCoordinates\n      // Re-render the list.\n\n\n      _this.updateLayout(reason);\n    });\n\n    _defineProperty(this, \"onUserStoppedScrolling\", function () {\n      if (_this.isMounted) {\n        // Re-render the list.\n        _this.updateLayout('stopped scrolling');\n      }\n    });\n\n    var getState = options.getState,\n        setState = options.setState,\n        onStateChange = options.onStateChange,\n        bypass = options.bypass,\n        bypassBatchSize = options.bypassBatchSize;\n    var estimatedItemHeight = options.estimatedItemHeight,\n        onItemFirstRender = options.onItemFirstRender,\n        state = options.state;\n    log('~ Initialize ~'); // If `state` is passed then use `items` from `state`\n    // instead of the `items` argument.\n\n    if (state) {\n      items = state.items;\n    } // if (margin === undefined) {\n    // \t// Renders items which are outside of the screen by this \"margin\".\n    // \t// Is the screen height by default: seems to be the optimal value\n    // \t// for \"Page Up\" / \"Page Down\" navigation and optimized mouse wheel scrolling.\n    // \tmargin = typeof window === 'undefined' ? 0 : window.innerHeight\n    // }\n    // `bypass` mode could work but turns out that\n    // unmounting large React component trees is a\n    // very long process, so it's still not a viable UX.\n\n\n    this.bypass = bypass;\n    this.bypassBatchSize = bypassBatchSize || 10;\n    this.initialItems = items; // this.margin = margin\n\n    this.estimatedItemHeight = estimatedItemHeight; // this.getItemState = getItemState\n\n    if (onItemFirstRender) {\n      this.onItemFirstRender = onItemFirstRender;\n    } // Remove accidental text nodes from container.\n    // Also guards against cases when someone accidentally tries\n    // using `VirtualScroller` on a non-empty element.\n\n\n    if (getContainerNode()) {\n      clearElement(getContainerNode());\n    }\n\n    if (setState) {\n      this.getState = getState;\n      this.setState = setState;\n    } else {\n      this.getState = function () {\n        return _this.state;\n      };\n\n      this.setState = function (state, callback) {\n        var prevState = _this.state;\n        _this.state = _objectSpread({}, prevState, state);\n\n        if (!shallowEqual(_this.state, prevState)) {\n          if (onStateChange) {\n            onStateChange(_this.state, prevState);\n          }\n\n          if (_this.isMounted) {\n            _this.onUpdate(prevState);\n          }\n        }\n\n        if (callback) {\n          callback();\n        }\n      };\n    }\n\n    if (state) {\n      log('Initial state (passed)', state);\n    }\n\n    this.setState(state || this.getInitialState());\n    this.getContainerNode = getContainerNode;\n    this.itemHeights = new ItemHeights(getContainerNode, items.length, this.getState);\n    log('Items count', items.length); // log('Start from index', START_FROM_INDEX)\n\n    if (estimatedItemHeight) {\n      log('Estimated item height', estimatedItemHeight);\n    }\n  }\n  /**\r\n   * Returns the initial state of the `VirtualScroller`.\r\n   * @param  {object} [customState] — Any additional \"custom\" state may be stored in `VirtualScroller`'s state. For example, React implementation stores item \"refs\" as \"custom\" state.\r\n   * @return {object}\r\n   */\n\n\n  _createClass(VirtualScroller, [{\n    key: \"getInitialState\",\n    value: function getInitialState(customState) {\n      var firstShownItemIndex;\n      var lastShownItemIndex;\n      var itemsCount = this.initialItems.length; // If there're no items then `firstShownItemIndex` stays `undefined`.\n\n      if (itemsCount > 0) {\n        firstShownItemIndex = Math.min(START_FROM_INDEX, itemsCount - 1);\n        lastShownItemIndex = this.getLastShownItemIndex(firstShownItemIndex, itemsCount);\n      } // Optionally preload items to be rendered.\n\n\n      this.onShowItems(firstShownItemIndex, lastShownItemIndex);\n\n      var state = _objectSpread({}, customState, {\n        items: this.initialItems,\n        itemStates: new Array(itemsCount),\n        itemHeights: new Array(itemsCount),\n        itemSpacing: undefined,\n        beforeItemsHeight: 0,\n        afterItemsHeight: 0,\n        firstShownItemIndex: firstShownItemIndex,\n        lastShownItemIndex: lastShownItemIndex\n      });\n\n      log('Initial state (created)', state);\n      log('First shown item index', firstShownItemIndex);\n      log('Last shown item index', lastShownItemIndex);\n      return state;\n    }\n    /**\r\n     * Returns estimated list item height.\r\n     * (depends on which items have been previously rendered and measured).\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"getEstimatedItemHeight\",\n    value: function getEstimatedItemHeight() {\n      return this.itemHeights && this.itemHeights.getAverage() || this.estimatedItemHeight || 0;\n    }\n  }, {\n    key: \"getItemSpacing\",\n    value: function getItemSpacing() {\n      return this.getState().itemSpacing || 0;\n    }\n  }, {\n    key: \"getEstimatedItemsCount\",\n    value: function getEstimatedItemsCount(height) {\n      if (this.getEstimatedItemHeight()) {\n        return Math.ceil((height + this.getItemSpacing()) / (this.getEstimatedItemHeight() + this.getItemSpacing()));\n      } else {\n        return 1;\n      }\n    }\n  }, {\n    key: \"getEstimatedItemsCountOnScreen\",\n    value: function getEstimatedItemsCountOnScreen() {\n      if (typeof window !== 'undefined') {\n        return this.getEstimatedItemsCount(window.innerHeight);\n      } else {\n        return 1;\n      }\n    }\n  }, {\n    key: \"getLastShownItemIndex\",\n    value: function getLastShownItemIndex(firstShownItemIndex, itemsCount) {\n      return Math.min(firstShownItemIndex + (this.getEstimatedItemsCountOnScreen() - 1), itemsCount - 1);\n    }\n  }, {\n    key: \"getItemsCount\",\n    value: function getItemsCount() {\n      return this.getState().items.length;\n    }\n  }, {\n    key: \"getMargin\",\n    value: function getMargin() {\n      // Renders items which are outside of the screen by this \"margin\".\n      // Is the screen height by default: seems to be the optimal value\n      // for \"Page Up\" / \"Page Down\" navigation and optimized mouse wheel scrolling.\n      return window.innerHeight;\n    }\n  }, {\n    key: \"onShowItems\",\n    value: function onShowItems(firstShownItemIndex, lastShownItemIndex) {\n      if (this.onItemFirstRender) {\n        if (this.firstSeenItemIndex === undefined) {\n          var i = firstShownItemIndex;\n\n          while (i <= lastShownItemIndex) {\n            this.onItemFirstRender(i);\n            i++;\n          }\n        } else {\n          if (firstShownItemIndex < this.firstSeenItemIndex) {\n            var _i = firstShownItemIndex;\n\n            while (_i < this.firstSeenItemIndex) {\n              this.onItemFirstRender(_i);\n              _i++;\n            }\n          }\n\n          if (lastShownItemIndex > this.lastSeenItemIndex) {\n            var _i2 = this.lastSeenItemIndex + 1;\n\n            while (_i2 <= lastShownItemIndex) {\n              this.onItemFirstRender(_i2);\n              _i2++;\n            }\n          }\n        }\n\n        this.firstSeenItemIndex = firstShownItemIndex;\n        this.lastSeenItemIndex = lastShownItemIndex;\n      }\n    }\n  }, {\n    key: \"onMount\",\n    value: function onMount() {\n      var _this$getState = this.getState(),\n          firstShownItemIndex = _this$getState.firstShownItemIndex,\n          lastShownItemIndex = _this$getState.lastShownItemIndex; // If there're any items.\n\n\n      if (this.getItemsCount() > 0) {\n        // Update item heights.\n        this.updateItemHeights(firstShownItemIndex, lastShownItemIndex);\n      }\n\n      this.isMounted = true;\n      this.onUpdateShownItemIndexes({\n        reason: 'on mount'\n      });\n\n      if (!this.bypass) {\n        window.addEventListener('scroll', this.onScroll);\n        window.addEventListener('resize', this.onResize);\n      }\n    }\n  }, {\n    key: \"onUnmount\",\n    value: function onUnmount() {\n      this.isMounted = false;\n\n      if (!this.bypass) {\n        window.removeEventListener('scroll', this.onScroll);\n        window.removeEventListener('resize', this.onResize);\n        clearTimeout(this.onUserStopsScrollingTimeout);\n        clearTimeout(this.watchContainerElementTopCoordinateTimer);\n      }\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(prevState) {\n      var _this$getState2 = this.getState(),\n          items = _this$getState2.items,\n          firstShownItemIndex = _this$getState2.firstShownItemIndex,\n          lastShownItemIndex = _this$getState2.lastShownItemIndex; // If new items are shown (or older items are hidden).\n\n\n      if (firstShownItemIndex !== prevState.firstShownItemIndex || lastShownItemIndex !== prevState.lastShownItemIndex || items !== prevState.items) {\n        // Update seen item heights.\n        this.updateItemHeights(firstShownItemIndex, lastShownItemIndex);\n      }\n    }\n  }, {\n    key: \"updateItemHeights\",\n    value: function updateItemHeights(fromIndex, toIndex) {\n      var _this$getState3 = this.getState(),\n          firstShownItemIndex = _this$getState3.firstShownItemIndex;\n\n      if (fromIndex !== undefined) {\n        log('~ Measure item heights after layout ~');\n        this.itemHeights.update(fromIndex, toIndex, firstShownItemIndex);\n\n        if (isDebug()) {\n          log('Item heights', this.getState().itemHeights.slice());\n        }\n      }\n    }\n  }, {\n    key: \"updateItemHeight\",\n    value: function updateItemHeight(i) {\n      var _this$getState4 = this.getState(),\n          firstShownItemIndex = _this$getState4.firstShownItemIndex;\n\n      this.itemHeights.updateItemHeight(i, firstShownItemIndex);\n    }\n  }, {\n    key: \"onItemStateChange\",\n    value: function onItemStateChange(i, itemState) {\n      if (isDebug()) {\n        log('~ Item state changed ~');\n        log('Item', i);\n        log('Previous state' + '\\n' + JSON.stringify(this.getState().itemStates[i], null, 2));\n        log('New state' + '\\n' + JSON.stringify(itemState, null, 2));\n      }\n\n      this.getState().itemStates[i] = itemState;\n    }\n  }, {\n    key: \"onItemHeightChange\",\n    value: function onItemHeightChange(i) {\n      var _this$getState5 = this.getState(),\n          itemHeights = _this$getState5.itemHeights;\n\n      var previousHeight = itemHeights[i];\n      this.updateItemHeight(i);\n      var newHeight = itemHeights[i];\n\n      if (previousHeight !== newHeight) {\n        log('~ Item height changed ~');\n        log('Item', i);\n        log('Previous height', previousHeight);\n        log('New height', newHeight);\n        this.onUpdateShownItemIndexes({\n          reason: 'item height change'\n        });\n      }\n    } // Finds the items which are displayed in the viewport.\n\n  }, {\n    key: \"getVisibleItemIndexes\",\n    value: function getVisibleItemIndexes(screenTop, screenBottom, listTop) {\n      var showItemsFromIndex;\n      var showItemsToIndex;\n      var itemsHeight = 0;\n      var redoLayoutAfterRender = false;\n      var i = START_FROM_INDEX;\n\n      while (i < this.getItemsCount()) {\n        var height = this.itemHeights.get(i); // If an item that hasn't been shown (measured) yet is encountered\n        // then show such item and then retry after it has been measured.\n\n        if (height === undefined) {\n          log(\"Item \".concat(i, \" height hasn't been measured yet: render and redo layout\"));\n\n          if (showItemsFromIndex === undefined) {\n            showItemsFromIndex = i;\n          }\n\n          var heightLeft = screenBottom - (listTop + itemsHeight);\n          showItemsToIndex = Math.min(i + (this.getEstimatedItemsCount(heightLeft) - 1), // Guard against index overflow.\n          this.getItemsCount() - 1);\n          redoLayoutAfterRender = true;\n          break;\n        }\n\n        itemsHeight += height; // If this is the first item visible\n        // then start showing items from it.\n\n        if (showItemsFromIndex === undefined) {\n          if (listTop + itemsHeight > screenTop) {\n            log('First visible item index (including margin)', i);\n            showItemsFromIndex = i;\n          }\n        } // Items can have spacing.\n\n\n        if (i < this.getItemsCount() - 1) {\n          itemsHeight += this.getItemSpacing();\n        } // If this item is the last one visible in the viewport then exit.\n\n\n        if (listTop + itemsHeight > screenBottom) {\n          log('Last visible item index (including margin)', i); // The list height is estimated until all items have been seen,\n          // so it's possible that even when the list DOM element happens\n          // to be in the viewport in reality the list isn't visible\n          // in which case `showItemsFromIndex` will be `undefined`.\n\n          if (showItemsFromIndex !== undefined) {\n            showItemsToIndex = i;\n          }\n\n          break;\n        }\n\n        i++;\n      } // If there're no more items then the last item is the last one to show.\n\n\n      if (showItemsFromIndex !== undefined && showItemsToIndex === undefined) {\n        showItemsToIndex = this.getItemsCount() - 1;\n        log('Last item index (is fully visible)', showItemsToIndex);\n      } // If scroll position is scheduled to be restored\n      // after render then the anchor item must be rendered\n      // and all the prepended items before it.\n\n\n      if (this.restoreScrollAfterPrepend) {\n        if (showItemsToIndex < this.restoreScrollAfterPrepend.index) {\n          showItemsToIndex = this.restoreScrollAfterPrepend.index;\n        } // No need to redo layout after render because all\n        // prepended items are rendered in a single pass.\n        // It removes the visual jitter otherwise happening\n        // due to scroll position restoration waiting for\n        // two layout cycles instead of one.\n\n\n        redoLayoutAfterRender = false;\n      }\n\n      return {\n        firstShownItemIndex: showItemsFromIndex,\n        lastShownItemIndex: showItemsToIndex,\n        redoLayoutAfterRender: redoLayoutAfterRender\n      };\n    }\n  }, {\n    key: \"getInvisibleItemIndexes\",\n    value: function getInvisibleItemIndexes() {\n      var i = START_FROM_INDEX;\n      return {\n        firstShownItemIndex: i,\n        lastShownItemIndex: i,\n        redoLayoutAfterRender: this.itemHeights.get(i) === undefined\n      };\n    }\n  }, {\n    key: \"getItemIndexes\",\n    value: function getItemIndexes(screenTop, screenBottom, top, bottom) {\n      var isVisible = bottom > screenTop && top < screenBottom;\n\n      if (!isVisible) {\n        return this.getInvisibleItemIndexes();\n      } // Find the items which are displayed in the viewport.\n\n\n      var indexes = this.getVisibleItemIndexes(screenTop, screenBottom, top); // The list height is estimated until all items have been seen,\n      // so it's possible that even when the list DOM element happens\n      // to be in the viewport in reality the list isn't visible\n      // in which case `firstShownItemIndex` will be `undefined`.\n\n      if (indexes.firstShownItemIndex === undefined) {\n        return this.getInvisibleItemIndexes();\n      }\n\n      return indexes;\n    }\n    /**\r\n     * Measures \"before\" items height.\r\n     * @param  {number} firstShownItemIndex — New first shown item index.\r\n     * @param  {number} lastShownItemIndex — New last shown item index.\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"getBeforeItemsHeight\",\n    value: function getBeforeItemsHeight(firstShownItemIndex, lastShownItemIndex) {\n      var beforeItemsHeight = 0; // Add all \"before\" items height.\n\n      var i = START_FROM_INDEX;\n\n      while (i < firstShownItemIndex) {\n        beforeItemsHeight += this.itemHeights.get(i) || this.itemHeights.getAverage();\n        beforeItemsHeight += this.getItemSpacing();\n        i++;\n      }\n\n      return beforeItemsHeight;\n    }\n    /**\r\n     * Measures \"after\" items height.\r\n     * @param  {number} firstShownItemIndex — New first shown item index.\r\n     * @param  {number} lastShownItemIndex — New last shown item index.\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"getAfterItemsHeight\",\n    value: function getAfterItemsHeight(firstShownItemIndex, lastShownItemIndex) {\n      var afterItemsHeight = 0;\n      var i = lastShownItemIndex + 1; // Add all \"after\" items height.\n\n      while (i < this.getItemsCount()) {\n        afterItemsHeight += this.getItemSpacing();\n        afterItemsHeight += this.itemHeights.get(i) || this.itemHeights.getAverage();\n        i++;\n      }\n\n      return afterItemsHeight;\n    }\n    /**\r\n     * Updates the heights of items to be hidden on next render.\r\n     * For example, a user could click a \"Show more\" button,\r\n     * or an \"Expand YouTube video\" button, which would result\r\n     * in the list item height changing and `this.itemHeights[i]`\r\n     * being stale, so it's updated here when hiding the item.\r\n     */\n\n  }, {\n    key: \"updateWillBeHiddenItemHeightsAndState\",\n    value: function updateWillBeHiddenItemHeightsAndState(firstShownItemIndex, lastShownItemIndex) {\n      var i = this.getState().firstShownItemIndex;\n\n      while (i <= this.getState().lastShownItemIndex) {\n        if (i >= firstShownItemIndex && i <= lastShownItemIndex) {// The item's still visible.\n        } else {\n          // Update item's height before hiding it\n          // because the height of the item may have changed\n          // while it was visible.\n          this.updateItemHeight(i); // // Update item's state because it's about to be hidden.\n          // if (this.getItemState) {\n          // \tthis.getState().itemStates[i] = this.getItemState(\n          // \t\tthis.getState().items[i],\n          // \t\ti,\n          // \t\tthis.getState().items\n          // \t)\n          // }\n        }\n\n        i++;\n      }\n    } // `VirtualScroller` calls `getShownItemIndexes()` on mount\n    // but if the page styles are applied after `VirtualScroller` mounts\n    // (for example, if styles are applied via javascript, like Webpack does)\n    // then the list might not render correctly and will only show the first item.\n    // The reason for that would be that calling `.getBoundingClientRect()`\n    // on the list container element on mount returned \"incorrect\" `top` position\n    // because the styles haven't been applied yet.\n    // For example, consider a page:\n    // <div class=\"page\">\n    //   <nav class=\"sidebar\">...</nav>\n    //   <main>...</main>\n    // </div>\n    // The sidebar is styled as `position: fixed`, but until\n    // the page styles have been applied it's gonna be a regular `<div/>`\n    // meaning that `<main/>` will be rendered below the sidebar\n    // and will appear offscreen and so it will only render the first item.\n    // Then, the page styles are loaded and applied and the sidebar\n    // is now `position: fixed` so `<main/>` is now rendered at the top of the page\n    // but `VirtualScroller`'s `onMount()` has already been called\n    // and it won't re-render until the user scrolls or the window is resized.\n    // This type of a bug doesn't occur in production, but it can appear\n    // in development mode when using Webpack. The workaround `VirtualScroller`\n    // implements for such cases is calling `.getBoundingClientRect()` on the\n    // list container DOM element periodically (every second) to check if the\n    // `top` coordinate has changed as a result of CSS being applied:\n    // if it has then it recalculates the shown item indexes.\n\n  }, {\n    key: \"watchContainerElementTopCoordinate\",\n    value: function watchContainerElementTopCoordinate() {\n      var _this2 = this;\n\n      var check = function check() {\n        // Skip the first time.\n        if (_this2.top !== undefined) {\n          // Calling `.getBoundingClientRect()` on an element is\n          // about 0.002 milliseconds on a modern desktop CPU.\n          var _getOffset = getOffset(_this2.getContainerNode()),\n              top = _getOffset.top;\n\n          if (top !== _this2.top) {\n            _this2.onUpdateShownItemIndexes({\n              reason: 'top offset change'\n            });\n          }\n        }\n\n        _this2.watchContainerElementTopCoordinateTimer = setTimeout(check, WATCH_CONTAINER_ELEMENT_TOP_COORDINATE_INTERVAL);\n      };\n\n      check();\n    }\n    /**\r\n     * Finds the items that are displayed in the viewport.\r\n     * @return {object} `{ firstShownItemIndex: number, lastShownItemIndex: number, redoLayoutAfterRender: boolean }`\r\n     */\n\n  }, {\n    key: \"getShownItemIndexes\",\n    value: function getShownItemIndexes() {\n      if (this.bypass) {\n        var _this$getState6 = this.getState(),\n            firstShownItemIndex = _this$getState6.firstShownItemIndex;\n\n        var _this$getState7 = this.getState(),\n            lastShownItemIndex = _this$getState7.lastShownItemIndex;\n\n        lastShownItemIndex = Math.min(lastShownItemIndex + this.bypassBatchSize, this.getItemsCount() - 1);\n        return {\n          firstShownItemIndex: firstShownItemIndex,\n          lastShownItemIndex: lastShownItemIndex,\n          redoLayoutAfterRender: lastShownItemIndex < this.getItemsCount() - 1\n        };\n      } // // A minor optimization. Just because I can.\n      // let listCoordinates\n      // if (this.listCoordinatesCached) {\n      // \tlistCoordinates = this.listCoordinatesCached\n      // \tthis.listCoordinatesCached = undefined\n      // } else {\n      // \tlistCoordinates = getOffset(this.getContainerNode())\n      // }\n      // const { top, height } = listCoordinates\n\n\n      var _getOffset2 = getOffset(this.getContainerNode()),\n          top = _getOffset2.top,\n          height = _getOffset2.height;\n\n      if (this.top === undefined) {\n        // See the comments for `watchContainerElementTopCoordinate()` method.\n        this.watchContainerElementTopCoordinate();\n      }\n\n      this.top = top;\n\n      var _getScreenBounds = getScreenBounds(),\n          screenTop = _getScreenBounds.top,\n          screenBottom = _getScreenBounds.bottom; // Set screen top and bottom for current layout.\n\n\n      this.latestLayoutScreenTopAfterMargin = screenTop - this.getMargin();\n      this.latestLayoutScreenBottomAfterMargin = screenBottom + this.getMargin(); // Find the items that are displayed in the viewport.\n\n      return this.getItemIndexes(screenTop - this.getMargin(), screenBottom + this.getMargin(), top, top + height);\n    }\n    /**\r\n     * Updates the \"from\" and \"to\" shown item indexes.\r\n     * `callback(redoLayoutAfterRender)` is called after it re-renders.\r\n     * If the list is visible and some of the items being shown are new\r\n     * and required to be measured first then `redoLayoutAfterRender` is `true`.\r\n     * If the list is visible and all items being shown have been encountered\r\n     * (and measured) before then `redoLayoutAfterRender` is `false`.\r\n     * @param {Function} callback\r\n     */\n\n  }, {\n    key: \"onDoneUpdatingItemIndexes\",\n    value: function onDoneUpdatingItemIndexes() {\n      this.isUpdatingItemIndexes = false;\n\n      if (this.restoreScrollAfterPrepend) {\n        this.restoreScroll();\n      }\n    }\n  }, {\n    key: \"captureScroll\",\n    value: function captureScroll(previousItems, nextItems, firstPreviousItemIndex) {\n      // If there were no items in the list\n      // then there's no point in restoring scroll position.\n      if (previousItems.length === 0) {\n        return;\n      }\n\n      if (firstPreviousItemIndex === undefined) {\n        firstPreviousItemIndex = nextItems.indexOf(previousItems[0]);\n      } // If the items update wasn't incremental\n      // then there's no point in restoring scroll position.\n\n\n      if (firstPreviousItemIndex < 0) {\n        return;\n      } // If no items were prepended then no need to restore scroll position.\n\n\n      if (firstPreviousItemIndex === 0) {\n        return;\n      } // The first item DOM Element must be rendered in order to get its top position.\n\n\n      if (this.getState().firstShownItemIndex > 0) {\n        return;\n      } // If the scroll position for these `previousItems` -> `nextItems`\n      // has already been captured then skip.\n      // This could happen when using `<ReactVirtualScroller/>`\n      // because it calls `.captureScroll()` inside `.render()`\n      // which is followed by `<VirtualScroller/>`'s `.componentDidUpdate()`\n      // which also alls `.captureScroll()` with the same arguments.\n      // (this is done to prevent scroll Y position from jumping\n      //  when showing the first page of the \"Previous items\",\n      //  see the comments in `<ReactVirtualScroller/>`'s `.render()` method).\n\n\n      if (this.restoreScrollAfterPrepend && this.restoreScrollAfterPrepend.previousItems === previousItems && this.restoreScrollAfterPrepend.nextItems === nextItems) {\n        return;\n      }\n\n      this.restoreScrollAfterPrepend = {\n        previousItems: previousItems,\n        nextItems: nextItems,\n        index: firstPreviousItemIndex,\n        screenTop: this.getItemElement(0).getBoundingClientRect().top\n      };\n    }\n  }, {\n    key: \"updateLayout\",\n    value: function updateLayout(reason) {\n      log(\"~ Update layout (\".concat(reason, \") ~\"));\n      this.isUpdatingItemIndexes = true;\n      this.updateShownItemIndexesRecursive();\n    }\n  }, {\n    key: \"updateItems\",\n\n    /**\r\n     * Updates `items`. For example, can prepend or append new items to the list.\r\n     * @param  {any[]} newItems\r\n     * @param {boolean} [options.preserveScrollPosition] — Set to `true` to enable \"restore scroll position after prepending items\" feature (could be useful when implementing \"Show previous items\" button).\r\n     */\n    value: function updateItems(newItems) {\n      var _this3 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // * @param  {object} [newCustomState] — If `customState` was passed to `getInitialState()`, this `newCustomState` updates it.\n      var _this$getState8 = this.getState(),\n          previousItems = _this$getState8.items;\n\n      var _this$getState9 = this.getState(),\n          firstShownItemIndex = _this$getState9.firstShownItemIndex,\n          lastShownItemIndex = _this$getState9.lastShownItemIndex,\n          beforeItemsHeight = _this$getState9.beforeItemsHeight,\n          afterItemsHeight = _this$getState9.afterItemsHeight,\n          itemStates = _this$getState9.itemStates,\n          itemHeights = _this$getState9.itemHeights,\n          itemSpacing = _this$getState9.itemSpacing;\n\n      log('~ Update items ~');\n\n      var _getItemsDiff = getItemsDiff(previousItems, newItems),\n          prependedItemsCount = _getItemsDiff.prependedItemsCount,\n          appendedItemsCount = _getItemsDiff.appendedItemsCount;\n\n      if (prependedItemsCount > 0 || appendedItemsCount > 0) {\n        if (prependedItemsCount > 0) {\n          log('Prepended items count', prependedItemsCount);\n\n          if (this.firstSeenItemIndex !== undefined) {\n            this.firstSeenItemIndex += prependedItemsCount;\n          }\n\n          itemHeights = new Array(prependedItemsCount).concat(itemHeights);\n          this.itemHeights.onPrepend(prependedItemsCount);\n\n          if (itemStates) {\n            itemStates = new Array(prependedItemsCount).concat(itemStates);\n          } // Since some items were prepended restore scroll Y\n          // position after rendering those new items.\n\n\n          if (options.preserveScrollPosition) {\n            this.captureScroll(previousItems, newItems, prependedItemsCount);\n          }\n        }\n\n        if (appendedItemsCount > 0) {\n          log('Appended items count', appendedItemsCount);\n          itemHeights = itemHeights.concat(new Array(appendedItemsCount));\n\n          if (itemStates) {\n            itemStates = itemStates.concat(new Array(appendedItemsCount));\n          }\n        }\n\n        firstShownItemIndex += prependedItemsCount;\n        lastShownItemIndex += prependedItemsCount;\n        beforeItemsHeight += this.itemHeights.getAverage() * prependedItemsCount;\n        afterItemsHeight += this.itemHeights.getAverage() * appendedItemsCount;\n      } else {\n        log('Non-incremental items update');\n        log('Previous items', previousItems);\n        log('New items', newItems);\n        this.firstSeenItemIndex = undefined;\n        this.lastSeenItemIndex = undefined;\n        this.itemHeights = new ItemHeights(this.getContainerNode, newItems.length, this.getState);\n        itemHeights = new Array(newItems.length);\n        itemStates = new Array(newItems.length);\n\n        if (newItems.length === 0) {\n          firstShownItemIndex = undefined;\n          lastShownItemIndex = undefined;\n        } else {\n          firstShownItemIndex = 0;\n          lastShownItemIndex = this.getLastShownItemIndex(firstShownItemIndex, newItems.length);\n        }\n\n        beforeItemsHeight = 0;\n        afterItemsHeight = 0;\n      }\n\n      var customState; // `newCustomState` argument is not currently being used.\n      // if (newCustomState) {\n      // \tif (typeof newCustomState === 'function') {\n      // \t\tcustomState = newCustomState(this.getState(), {\n      // \t\t\tprependedCount: isIncrementalUpdate ? undefined : prependedItemsCount,\n      // \t\t\tappendedCount: isIncrementalUpdate ? undefined : appendedItemsCount\n      // \t\t})\n      // \t} else {\n      // \t\tcustomState = newCustomState\n      // \t}\n      // }\n\n      log('First shown item index', firstShownItemIndex);\n      log('Last shown item index', lastShownItemIndex);\n      log('Before items height', beforeItemsHeight);\n      log('After items height', afterItemsHeight); // Optionally preload items to be rendered.\n\n      this.onShowItems(firstShownItemIndex, lastShownItemIndex); // Render.\n\n      this.setState(_objectSpread({}, customState, {\n        items: newItems,\n        itemStates: itemStates,\n        itemHeights: itemHeights,\n        firstShownItemIndex: firstShownItemIndex,\n        lastShownItemIndex: lastShownItemIndex,\n        beforeItemsHeight: beforeItemsHeight,\n        afterItemsHeight: afterItemsHeight\n      }), function () {\n        _this3.onUpdateShownItemIndexes({\n          reason: 'update items',\n          force: true\n        });\n      });\n    }\n  }, {\n    key: \"getItemElement\",\n    value: function getItemElement(i) {\n      return this.getContainerNode().childNodes[i];\n    } // Turns out this optimization won't work\n    // because sometimes item height is an average approximation\n    // and the other times it's the real item height\n    // and sometimes it can change while item's not visible.\n    // /**\n    //  * Measures new \"before\" items height.\n    //  * @param  {number} firstShownItemIndex — New first shown item index.\n    //  * @param  {number} lastShownItemIndex — New last shown item index.\n    //  * @return {number}\n    //  */\n    // getBeforeItemsHeightOptimized(firstShownItemIndex, lastShownItemIndex) {\n    // \t// If the previous and new shown item indexes intersect\n    // \t// then the new \"before\" items height may be calculated\n    // \t// based on the previous \"before\" items height.\n    // \tif (this.getState().averageItemHeight !== undefined &&\n    // \t\tthis.doPrevAndNextItemIndexesIntersect(firstShownItemIndex, lastShownItemIndex)) {\n    // \t\tlet beforeItemsHeight = this.getState().beforeItemsHeight\n    // \t\t// Add all \"before\" will-be-hidden items' height.\n    // \t\tlet i = this.getState().firstShownItemIndex\n    // \t\twhile (i <= this.getState().lastShownItemIndex && i < firstShownItemIndex) {\n    // \t\t\tbeforeItemsHeight += (this.itemHeights.get(i) || this.itemHeights.getAverage())\n    // \t\t\tbeforeItemsHeight += this.getItemSpacing()\n    // \t\t\ti++\n    // \t\t}\n    // \t\t// Subtract all \"before\" will-be-shown items' height.\n    // \t\ti = firstShownItemIndex\n    // \t\twhile (i <= lastShownItemIndex && i < this.getState().firstShownItemIndex) {\n    // \t\t\tbeforeItemsHeight -= (this.itemHeights.get(i) || this.itemHeights.getAverage())\n    // \t\t\tbeforeItemsHeight -= this.getItemSpacing()\n    // \t\t\ti++\n    // \t\t}\n    // \t\treturn beforeItemsHeight\n    // \t}\n    // \t// If the previous and new shown item indexes don't intersect\n    // \t// then re-calculate \"before\" items height.\n    // \telse {\n    // \t\treturn this.getBeforeItemsHeight(firstShownItemIndex, lastShownItemIndex)\n    // \t}\n    // }\n    // Turns out this optimization won't work\n    // because sometimes item height is an average approximation\n    // and the other times it's the real item height\n    // and sometimes it can change while item's not visible.\n    // /**\n    //  * Measures new \"after\" items height.\n    //  * @param  {number} firstShownItemIndex — New first shown item index.\n    //  * @param  {number} lastShownItemIndex — New last shown item index.\n    //  * @return {number}\n    //  */\n    // getAfterItemsHeightOptimized(firstShownItemIndex, lastShownItemIndex) {\n    // \t// If the previous and new shown item indexes intersect\n    // \t// then the new \"after\" items height may be calculated\n    // \t// based on the previous \"after\" items height.\n    // \tif (this.getState().averageItemHeight !== undefined &&\n    // \t\tthis.doPrevAndNextItemIndexesIntersect(firstShownItemIndex, lastShownItemIndex)) {\n    // \t\tlet afterItemsHeight = this.getState().afterItemsHeight\n    // \t\t// Add all \"after\" will-be-hidden items' height.\n    // \t\tlet i = this.getState().lastShownItemIndex\n    // \t\twhile (i >= this.getState().firstShownItemIndex && i > lastShownItemIndex) {\n    // \t\t\tafterItemsHeight += (this.itemHeights.get(i) || this.itemHeights.getAverage())\n    // \t\t\tafterItemsHeight += this.getItemSpacing()\n    // \t\t\ti--\n    // \t\t}\n    // \t\t// Subtract all \"after\" will-be-shown items' height.\n    // \t\ti = lastShownItemIndex\n    // \t\twhile (i >= firstShownItemIndex && i > this.getState().lastShownItemIndex) {\n    // \t\t\tafterItemsHeight -= (this.itemHeights.get(i) || this.itemHeights.getAverage())\n    // \t\t\tafterItemsHeight -= this.getItemSpacing()\n    // \t\t\ti--\n    // \t\t}\n    // \t\treturn afterItemsHeight\n    // \t}\n    // \t// If the previous and new shown item indexes don't intersect\n    // \t// then re-calculate \"after\" items height.\n    // \telse {\n    // \t\treturn this.getAfterItemsHeight(firstShownItemIndex, lastShownItemIndex)\n    // \t}\n    // }\n    // Was used it `.getBeforeItemsHeightOptimized()` and `.getAfterItemsHeightOptimized()`.\n    // doPrevAndNextItemIndexesIntersect(firstShownItemIndex, lastShownItemIndex) {\n    // \treturn firstShownItemIndex <= this.getState().lastShownItemIndex &&\n    // \t\tlastShownItemIndex >= this.getState().firstShownItemIndex\n    // }\n    // Not implementing the \"delayed\" layout feature for now.\n    // delayLayout(args) {\n    // \t// Suppose there's a \"router\" library which restores scroll position\n    // \t// on \"Back\" navigation but only does so after `componentDidMount()`\n    // \t// is called on the underlying page meaning that by the time\n    // \t// the scroll position is restored the `VirtualScroller` component\n    // \t// has already rendered with previous page's scroll position\n    // \t// resulting in an unnecessary layout. \"Delaying\" layout\n    // \t// means that the layout is called in a `setTimeout(..., 0)` call\n    // \t// rather than immediately on mount.\n    // \tif (this.shouldDelayLayout) {\n    // \t\tthis.layoutDelayedWithArgs = args\n    // \t\t// Then in `.onMount()`:\n    // \t\t// if (this.layoutDelayedWithArgs) {\n    // \t\t// \tthis.shouldDelayLayout = false\n    // \t\t// \tsetTimeout(() => {\n    // \t\t// \t\tif (this.isMounted) {\n    // \t\t// \t\t\tthis.onUpdateShownItemIndexes(this.layoutDelayedWithArgs)\n    // \t\t// \t\t\tthis.layoutDelayedWithArgs = undefined\n    // \t\t// \t\t}\n    // \t\t// \t}, 0)\n    // \t\t// }\n    // \t\treturn true\n    // \t}\n    // }\n\n  }]);\n\n  return VirtualScroller;\n}();\n\nexport { VirtualScroller as default };\n\nfunction getRemainderRest(n, divider) {\n  var remainder = n % divider;\n\n  if (remainder > 0) {\n    return divider - remainder;\n  }\n\n  return 0;\n}\n\nexport function getItemsDiff(previousItems, newItems) {\n  var firstPreviousItemIndex = -1;\n  var lastPreviousItemIndex = -1;\n\n  if (previousItems.length > 0) {\n    firstPreviousItemIndex = newItems.indexOf(previousItems[0]);\n\n    if (firstPreviousItemIndex >= 0) {\n      if (arePreviousItemsPreserved(previousItems, newItems, firstPreviousItemIndex)) {\n        lastPreviousItemIndex = firstPreviousItemIndex + previousItems.length - 1;\n      }\n    }\n  }\n\n  var isIncrementalUpdate = firstPreviousItemIndex >= 0 && lastPreviousItemIndex >= 0;\n\n  if (isIncrementalUpdate) {\n    return {\n      prependedItemsCount: firstPreviousItemIndex,\n      appendedItemsCount: newItems.length - (lastPreviousItemIndex + 1)\n    };\n  }\n\n  return {\n    prependedItemsCount: -1,\n    appendedItemsCount: -1\n  };\n}\n\nfunction arePreviousItemsPreserved(previousItems, newItems, offset) {\n  // Check each item of the `previousItems` to determine\n  // whether it's an \"incremental\" items update.\n  // (an update when items are prepended or appended)\n  var i = 0;\n\n  while (i < previousItems.length) {\n    if (newItems.length <= offset + i || newItems[offset + i] !== previousItems[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n//# sourceMappingURL=VirtualScroller.js.map","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport VirtualScroller, { getItemsDiff } from './VirtualScroller';\nimport shallowEqual from './shallowEqual'; // `PropTypes.elementType` is available in some version of `prop-types`.\n// https://github.com/facebook/prop-types/issues/200\n\nvar elementType = PropTypes.elementType || PropTypes.oneOfType([PropTypes.func, PropTypes.object]);\n\nvar ReactVirtualScroller =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ReactVirtualScroller, _React$Component);\n\n  // Handler function caches.\n  // Just so that the props passed to `itemComponent`\n  // are not changed on every `.render()` and so\n  // `itemComponent` won't re-render if it's a `PureComponent`.\n  // Item refs for `.updateItem(i)`.\n  // List items are rendered with `key`s\n  // so that React doesn't reuse `itemComponent`s\n  // in cases when `items` are changed.\n  function ReactVirtualScroller(props) {\n    var _this;\n\n    _classCallCheck(this, ReactVirtualScroller);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ReactVirtualScroller).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"container\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"onItemStateChange\", new Array(_this.props.items.length));\n\n    _defineProperty(_assertThisInitialized(_this), \"onItemHeightChange\", new Array(_this.props.items.length));\n\n    _defineProperty(_assertThisInitialized(_this), \"itemRefs\", new Array(_this.props.items.length));\n\n    _defineProperty(_assertThisInitialized(_this), \"uniquePrefixes\", []);\n\n    _defineProperty(_assertThisInitialized(_this), \"onItemFirstRender\", function () {\n      var onItemFirstRender = _this.props.onItemFirstRender;\n\n      if (onItemFirstRender) {\n        onItemFirstRender.apply(void 0, arguments);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onStateChange\", function () {\n      var onStateChange = _this.props.onStateChange;\n\n      if (onStateChange) {\n        onStateChange.apply(void 0, arguments);\n      }\n    });\n\n    var _this$props = _this.props,\n        items = _this$props.items,\n        initialState = _this$props.initialState,\n        estimatedItemHeight = _this$props.estimatedItemHeight,\n        bypass = _this$props.bypass,\n        bypassBatchSize = _this$props.bypassBatchSize; // `this.previousItemsProperty` is only used for comparing\n    // `previousItems` with `newItems` in `render()`.\n\n    _this.previousItemsProperty = items; // Create `virtual-scroller` instance.\n\n    _this.virtualScroller = new VirtualScroller(function () {\n      return _this.container.current;\n    }, items, {\n      estimatedItemHeight: estimatedItemHeight,\n      bypass: bypass,\n      bypassBatchSize: bypassBatchSize,\n      onItemFirstRender: _this.onItemFirstRender,\n      state: initialState,\n      getState: function getState() {\n        return _this.state;\n      },\n      setState: function setState(newState, callback) {\n        if (_this.state) {\n          // Update existing state.\n          _this.setState(newState, callback);\n        } else {\n          // Set initial state.\n          _this.state = newState;\n\n          _this.onStateChange(newState);\n        }\n      }\n    }); // Generate unique `key` prefix for list item components.\n\n    _this.generateUniquePrefix();\n\n    return _this;\n  } // This proxy is required for cases when\n  // `onItemFirstRender` property changes.\n  // For example, if it's passed as:\n  // `<VirtualScroller onItemFirstRender={() => ...}/>`.\n\n\n  _createClass(ReactVirtualScroller, [{\n    key: \"shouldUseRefs\",\n    value: function shouldUseRefs() {\n      // There's no way to detect if `ref` can be passed to `component`:\n      // https://github.com/facebook/react/issues/16309\n      // So only uses `ref`s for `React.Component`s.\n      var itemComponent = this.props.itemComponent;\n      return isComponentClass(itemComponent);\n    }\n  }, {\n    key: \"updateItem\",\n    value: function updateItem(i) {\n      var _this2 = this;\n\n      if (!this.shouldUseRefs()) {\n        return console.error('[virtual-scroller] `.updateItem(i)` has been called but the `component` doesn\\'t allow `ref`s. Only `component`s that\\'re `React.Component`s support this feature.');\n      } // The item may be non-rendered when `.updateItem(i)` is called on it.\n      // For example, when there's a \"parent comment\" having several \"replies\"\n      // each of which has an autogenerated quote of the \"parent comment\"\n      // and then the \"parent comment\" is updated (for example, a YouTube video\n      // link gets parsed into an embedded video player) and all of its \"replies\"\n      // should be updated too to show the parsed video title instead of the URL,\n      // so `.updateItem(i)` is simply called on all of the \"parent post\"'s replies\n      // regardless of some of those replies being rendered or not.\n\n\n      if (this.itemRefs[i] && this.itemRefs[i].current) {\n        var items = this.props.items; // Stores `item` here because the `i` index\n        // might have changed when the callback is called,\n        // or the item even may have been removed.\n\n        var item = items[i];\n        this.itemRefs[i].current.forceUpdate(function () {\n          if (_this2._isMounted) {\n            // Recalculates the `i` index here because it\n            // might have changed when the callback is called,\n            // or the item even may have been removed.\n            var _i = items.indexOf(item);\n\n            if (_i >= 0) {\n              _this2.virtualScroller.onItemHeightChange(_i);\n            }\n          }\n        });\n      }\n    } // Functional components can't have a `ref` assigned to them.\n    // Item `ref`s are only used for calling `.updateItem(i)` instance method.\n    // If a developer is not using the `.updateItem(i)` instance method\n    // then `ref`s aren't required and will be omitted.\n\n  }, {\n    key: \"getItemRef\",\n    value: function getItemRef(i) {\n      if (!this.itemRefs[i]) {\n        this.itemRefs[i] = React.createRef();\n      }\n\n      return this.itemRefs[i];\n    }\n  }, {\n    key: \"getOnItemStateChange\",\n    value: function getOnItemStateChange(i) {\n      var _this3 = this;\n\n      if (!this.onItemStateChange[i]) {\n        this.onItemStateChange[i] = function (itemState) {\n          return _this3.virtualScroller.onItemStateChange(i, itemState);\n        };\n      }\n\n      return this.onItemStateChange[i];\n    }\n  }, {\n    key: \"getOnItemHeightChange\",\n    value: function getOnItemHeightChange(i) {\n      var _this4 = this;\n\n      if (!this.onItemHeightChange[i]) {\n        this.onItemHeightChange[i] = function () {\n          return _this4.virtualScroller.onItemHeightChange(i);\n        };\n      }\n\n      return this.onItemHeightChange[i];\n    }\n  }, {\n    key: \"generateUniquePrefix\",\n    value: function generateUniquePrefix() {\n      var prefix = String(Math.random()).slice(2);\n\n      if (this.uniquePrefixes.indexOf(prefix) >= 0) {\n        return this.generateUniquePrefix();\n      }\n\n      this.uniquePrefixes.push(prefix);\n      this.uniquePrefix = prefix;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onMount = this.props.onMount; // `onMount()` should be called before `VirtualScroller`'s\n      // in order for it to be able to be used for restoring\n      // page scroll Y position.\n\n      if (onMount) {\n        onMount();\n      }\n\n      this.virtualScroller.onMount();\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onStateChange = this.props.onStateChange; // An application may choose to track `virtual-scroller` state\n      // for later restoring it on \"Back\" navigation.\n\n      if (onStateChange) {\n        if (!shallowEqual(this.state, prevState)) {\n          onStateChange(this.state, prevState);\n        }\n      } // Re-measure rendered items' heights.\n\n\n      this.virtualScroller.onUpdate(prevState); // If `items` property did change then update `virtual-scroller` items.\n      // This could have been done in `.render()` but `.updateItems()` calls\n      // `.setState()` internally which would result in React throwing an error.\n\n      var _this$props2 = this.props,\n          items = _this$props2.items,\n          preserveScrollPosition = _this$props2.preserveScrollPosition;\n\n      if (items !== prevProps.items) {\n        this.virtualScroller.updateItems(items, {\n          preserveScrollPosition: preserveScrollPosition\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.virtualScroller.onUnmount();\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var _this$props3 = this.props,\n          Component = _this$props3.itemComponent,\n          itemComponentProps = _this$props3.itemComponentProps,\n          _items = _this$props3.items,\n          estimatedItemHeight = _this$props3.estimatedItemHeight,\n          bypass = _this$props3.bypass,\n          bypassBatchSize = _this$props3.bypassBatchSize,\n          preserveScrollPosition = _this$props3.preserveScrollPosition,\n          initialState = _this$props3.initialState,\n          onStateChange = _this$props3.onStateChange,\n          onItemFirstRender = _this$props3.onItemFirstRender,\n          onMount = _this$props3.onMount,\n          rest = _objectWithoutProperties(_this$props3, [\"itemComponent\", \"itemComponentProps\", \"items\", \"estimatedItemHeight\", \"bypass\", \"bypassBatchSize\", \"preserveScrollPosition\", \"initialState\", \"onStateChange\", \"onItemFirstRender\", \"onMount\"]);\n\n      var _this$virtualScroller = this.virtualScroller.getState(),\n          items = _this$virtualScroller.items,\n          itemStates = _this$virtualScroller.itemStates,\n          firstShownItemIndex = _this$virtualScroller.firstShownItemIndex,\n          lastShownItemIndex = _this$virtualScroller.lastShownItemIndex,\n          beforeItemsHeight = _this$virtualScroller.beforeItemsHeight,\n          afterItemsHeight = _this$virtualScroller.afterItemsHeight; // If `items` are about to be changed then\n      // store the scroll Y position for the first one\n      // of the current items.\n      // Previously it was being done in `componentDidUpdate()`\n      // but it was later found out that it wouldn't work\n      // for \"Show previous\" button because it would\n      // get hidden before `componentDidUpdate()` is called.\n      //\n      // Consider this code example:\n      //\n      // const { fromIndex, items } = this.state\n      // const items = allItems.slice(fromIndex)\n      // return (\n      // \t{fromIndex > 0 &&\n      // \t\t<button onClick={this.onShowPrevious}>\n      // \t\t\tShow previous\n      // \t\t</button>\n      // \t}\n      // \t<VirtualScroller\n      // \t\titems={items}\n      // \t\titemComponent={ItemComponent}/>\n      // )\n      //\n      // Consider a user clicks \"Show previous\" to show the items from the start.\n      // By the time `componentDidUpdate()` is called on `<VirtualScroller/>`\n      // the \"Show previous\" button has already been hidden\n      // which results in the scroll Y position jumping forward\n      // by the height of the \"Show previous\" button.\n      // This is because `<VirtualScroller/>` restores scroll Y position\n      // when items are prepended via `.updateItems()` and it does that\n      // when the \"Show previous\" button has already been hidden\n      // so that's the reason for the scroll Y jump.\n      //\n      // To prevent that, scroll Y position is stored at `render()` time\n      // rather than later in `componentDidUpdate()`.\n      //\n\n\n      var newItems = this.props.items;\n      var previousItems = items; // this.virtualScroller.getState().items\n      // There's one case when `newItems !== previousItems` is `true`\n      // from the start: when `initialState.items` are passed.\n      // To handle that single case `this.previousItemsProperty`\n      // is tracked and `this.itemsPropertyHasChanged` flag is set.\n\n      if (!this.itemsPropertyWasChanged) {\n        this.itemsPropertyWasChanged = this.props.items !== this.previousItemsProperty;\n      }\n\n      this.previousItemsProperty = this.props.items;\n\n      if (this.itemsPropertyWasChanged && newItems !== previousItems) {\n        var _getItemsDiff = getItemsDiff(previousItems, newItems),\n            prependedItemsCount = _getItemsDiff.prependedItemsCount,\n            appendedItemsCount = _getItemsDiff.appendedItemsCount;\n\n        if (prependedItemsCount === 0 && appendedItemsCount > 0) {// If it's just items that have been appended\n          // then no need to re-generate the prefix\n          // and to fix scroll position and to clear caches.\n        } else {\n          if (preserveScrollPosition) {\n            this.virtualScroller.captureScroll(previousItems, newItems);\n          } // Reset the unique `key` prefix for item component keys.\n\n\n          this.generateUniquePrefix(); // Reset handler function caches.\n\n          this.onItemStateChange = new Array(newItems.length);\n          this.onItemHeightChange = new Array(newItems.length); // Reset item refs.\n\n          this.itemRefs = new Array(newItems.length);\n        }\n      }\n\n      return React.createElement(\"div\", _extends({}, rest, {\n        ref: this.container,\n        style: {\n          paddingTop: beforeItemsHeight + 'px',\n          paddingBottom: afterItemsHeight + 'px'\n        }\n      }), items.map(function (item, i) {\n        if (i >= firstShownItemIndex && i <= lastShownItemIndex) {\n          return React.createElement(Component, _extends({}, itemComponentProps, {\n            ref: _this5.shouldUseRefs() ? _this5.getItemRef(i) : undefined,\n            key: \"\".concat(_this5.uniquePrefix, \":\").concat(i),\n            state: itemStates && itemStates[i],\n            onStateChange: _this5.getOnItemStateChange(i),\n            onHeightChange: _this5.getOnItemHeightChange(i)\n          }), item);\n        }\n\n        return null;\n      }));\n    }\n  }]);\n\n  return ReactVirtualScroller;\n}(React.Component);\n/**\r\n * Checks if the argument is a `React.Component` class.\r\n * https://overreacted.io/how-does-react-tell-a-class-from-a-function/\r\n * @param  {any}  Component\r\n * @return {object} [result] Returns `undefined` if it's not a `React.Component`. Returns an empty object if it's a `React.Component` (`.isReactComponent` is an empty object).\r\n */\n\n\n_defineProperty(ReactVirtualScroller, \"propTypes\", {\n  items: PropTypes.arrayOf(PropTypes.object).isRequired,\n  itemComponent: elementType.isRequired,\n  itemComponentProps: PropTypes.object,\n  estimatedItemHeight: PropTypes.number,\n  bypass: PropTypes.bool,\n  bypassBatchSize: PropTypes.number,\n  preserveScrollPosition: PropTypes.bool,\n  onMount: PropTypes.func,\n  onItemFirstRender: PropTypes.func,\n  onStateChange: PropTypes.func,\n  initialState: PropTypes.shape({\n    items: PropTypes.arrayOf(PropTypes.object).isRequired,\n    itemStates: PropTypes.arrayOf(PropTypes.any),\n    firstShownItemIndex: PropTypes.number.isRequired,\n    lastShownItemIndex: PropTypes.number.isRequired,\n    beforeItemsHeight: PropTypes.number.isRequired,\n    afterItemsHeight: PropTypes.number.isRequired,\n    itemHeights: PropTypes.arrayOf(PropTypes.number).isRequired,\n    itemSpacing: PropTypes.number\n  }) // `this.state` is already reserved for `virtual-scroller`.\n  // static getDerivedStateFromProps(props, state) {\n  // \treturn {\n  // \t\tprevProps: {\n  // \t\t\titems: props.items\n  // \t\t}\n  // \t}\n  // }\n\n});\n\nexport { ReactVirtualScroller as default };\n\nfunction isComponentClass(Component) {\n  // return Component.prototype instanceof React.Component\n  // `React.memo()` returns `.prototype === undefined` for some reason.\n  return Component.prototype && Component.prototype.isReactComponent;\n}\n//# sourceMappingURL=ReactVirtualScroller.js.map"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","hasOwnProperty","Object","is","x","y","shallowEqual","objA","objB","keysA","keys","keysB","length","i","call","getOffset","element","onScreenCoordinates","getBoundingClientRect","documentLeftBorderWidth","document","clientLeft","body","documentTopBorderWidth","clientTop","scrollY","window","pageYOffset","scrollX","pageXOffset","top","left","width","height","getScrollY","getScreenHeight","innerHeight","_toConsumableArray","arr","Array","isArray","arr2","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","log","isDebug","_console","_len","arguments","args","_key","console","apply","concat","VirtualScrollerDebug","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","ItemHeights","getContainerNode","itemsCount","getState","instance","Constructor","_classCallCheck","this","measuredItemsHeight","itemHeights","undefined","firstMeasuredItemIndex","lastMeasuredItemIndex","protoProps","staticProps","value","firstShownItemIndex","container","nodeIndex","childNodes","firstItem","secondItem","firstItemRect","spacing","fromIndex","toIndex","itemSpacing","getItemSpacing","previousAverageItemHeight","averageItemHeight","previousAverageItemHeightSamplesCount","previousFirstMeasuredItemIndex","previousLastMeasuredItemIndex","firstMeasuredItemIndexHasBeenUpdated","_getItemHeight","set","updateAverageItemHeight","previousHeight","get","averageItemHeightSamplesCount","count","_objectSpread","source","ownKeys","getOwnPropertySymbols","filter","sym","getOwnPropertyDescriptor","forEach","_defineProperty","VirtualScroller","items","_this","options","onUpdateShownItemIndexes","reason","callback","_this$getShownItemInd","getShownItemIndexes","lastShownItemIndex","redoLayoutAfterRender","beforeItemsHeight","getBeforeItemsHeight","afterItemsHeight","getAfterItemsHeight","updateWillBeHiddenItemHeightsAndState","bypass","getAverage","slice","itemStates","onShowItems","setState","updateShownItemIndexes","setTimeout","isMounted","updateShownItemIndexesRecursive","onDoneUpdatingItemIndexes","_this$restoreScrollAf","restoreScrollAfterPrepend","index","screenTop","scrollByY","getItemElement","scrollTo","_ref","force","getItemsCount","isUpdatingItemIndexes","clearTimeout","onUserStopsScrollingTimeout","forceRender","latestLayoutScreenTopAfterMargin","latestLayoutScreenBottomAfterMargin","onUserStoppedScrolling","updateLayout","onStateChange","bypassBatchSize","estimatedItemHeight","onItemFirstRender","state","initialItems","firstChild","removeChild","clearElement","prevState","onUpdate","getInitialState","customState","Math","min","getLastShownItemIndex","getEstimatedItemHeight","ceil","getEstimatedItemsCount","getEstimatedItemsCountOnScreen","firstSeenItemIndex","_i","lastSeenItemIndex","_i2","_this$getState","updateItemHeights","addEventListener","onScroll","onResize","removeEventListener","watchContainerElementTopCoordinateTimer","_this$getState2","update","updateItemHeight","itemState","JSON","stringify","newHeight","screenBottom","listTop","showItemsFromIndex","showItemsToIndex","itemsHeight","heightLeft","bottom","getInvisibleItemIndexes","indexes","getVisibleItemIndexes","_this2","check","_getOffset2","watchContainerElementTopCoordinate","_getScreenBounds","getScreenBounds","getMargin","getItemIndexes","restoreScroll","previousItems","nextItems","firstPreviousItemIndex","indexOf","newItems","_this3","_this$getState9","_getItemsDiff","getItemsDiff","prependedItemsCount","appendedItemsCount","onPrepend","preserveScrollPosition","captureScroll","lastPreviousItemIndex","offset","arePreviousItemsPreserved","_extends","assign","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","p","elementType","PropTypes","oneOfType","func","object","ReactVirtualScroller","_React$Component","React","createRef","_this$props","initialState","previousItemsProperty","virtualScroller","current","newState","generateUniquePrefix","subClass","superClass","create","_inherits","Component","itemComponent","isReactComponent","shouldUseRefs","error","itemRefs","item","forceUpdate","_isMounted","onItemHeightChange","onItemStateChange","_this4","prefix","String","random","uniquePrefixes","push","uniquePrefix","onMount","prevProps","_this$props2","updateItems","onUnmount","_this5","_this$props3","itemComponentProps","rest","_this$virtualScroller","itemsPropertyWasChanged","createElement","ref","style","paddingTop","paddingBottom","map","getItemRef","getOnItemStateChange","onHeightChange","getOnItemHeightChange","arrayOf","isRequired","number","bool","shape","any"],"mappings":"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"}