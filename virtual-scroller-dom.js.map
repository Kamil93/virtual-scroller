{"version":3,"file":"virtual-scroller-dom.js","sources":["../modules/shallowEqual.js","../modules/DOM.js","../modules/log.js","../modules/ItemHeights.js","../modules/utility.js","../modules/VirtualScroller.js","../modules/DOMVirtualScroller.js"],"sourcesContent":["// https://github.com/lodash/lodash/issues/2340\n// https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/shallowEqual.js\n\n/**\r\n * Copyright (c) 2013-present, Facebook, Inc.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @providesModule shallowEqual\r\n * @typechecks\r\n * @flow\r\n */\n\n/*eslint-disable no-self-compare */\n'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\r\n * inlined Object.is polyfill to avoid requiring consumers ship their own\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\r\n */\n\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n/**\r\n * Performs equality by iterating through keys on an object and returning false\r\n * when any key has values which are not strictly equal between the arguments.\r\n * Returns true when the values of all keys are strictly equal.\r\n */\n\n\nexport default function shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (_typeof(objA) !== 'object' || objA === null || _typeof(objB) !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n//# sourceMappingURL=shallowEqual.js.map","/**\r\n * Returns the DOM element's `top` and `left` offset relative to the document.\r\n * `document` can potentially have margins so this function takes care of that.\r\n * Calling `getOffset()` on an element is about 0.003 milliseconds on a modern desktop CPU.\r\n * @param  {object} element\r\n * @return {object} `{ top: number, left: number, width: number, height: number }`\r\n */\nexport function getOffset(element) {\n  // Copied from:\n  // http://stackoverflow.com/questions/5598743/finding-elements-position-relative-to-the-document\n  // Calling `.getBoundingClientRect()` on an element is\n  // about 0.002 milliseconds on a modern desktop CPU.\n  var onScreenCoordinates = element.getBoundingClientRect();\n  var documentLeftBorderWidth = document.clientLeft || document.body.clientLeft || 0;\n  var documentTopBorderWidth = document.clientTop || document.body.clientTop || 0; // `window.scrollY` and `window.scrollX` aren't supported in Internet Explorer.\n\n  var scrollY = window.pageYOffset;\n  var scrollX = window.pageXOffset;\n  var top = onScreenCoordinates.top + scrollY - documentTopBorderWidth;\n  var left = onScreenCoordinates.left + scrollX - documentLeftBorderWidth;\n  return {\n    top: top,\n    left: left,\n    width: onScreenCoordinates.width,\n    height: onScreenCoordinates.height\n  };\n}\nexport function getScrollY() {\n  // `window.scrollY` is not supported by Internet Explorer.\n  return window.pageYOffset;\n}\nexport function clearElement(element) {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n}\nexport function getScreenHeight() {\n  return window.innerHeight;\n}\nexport function getScreenBounds() {\n  var height = getScreenHeight();\n  return {\n    // The first pixel of the viewport.\n    top: getScrollY(),\n    // The pixel after the last pixel of the viewport.\n    bottom: getScrollY() + height,\n    height: height\n  };\n}\n//# sourceMappingURL=DOM.js.map","function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nexport default function log() {\n  if (isDebug()) {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    (_console = console).log.apply(_console, _toConsumableArray(['[virtual-scroller]'].concat(args)));\n  }\n}\nexport function isDebug() {\n  return typeof window !== 'undefined' && window.VirtualScrollerDebug;\n}\n//# sourceMappingURL=log.js.map","function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nimport log from './log';\n\nvar ItemHeights =\n/*#__PURE__*/\nfunction () {\n  function ItemHeights(getContainerNode, getState) {\n    _classCallCheck(this, ItemHeights);\n\n    this.getContainerNode = getContainerNode;\n    this.getState = getState;\n    this.reset();\n  }\n\n  _createClass(ItemHeights, [{\n    key: \"reset\",\n    value: function reset() {\n      this.measuredItemsHeight = 0;\n      this.firstMeasuredItemIndex = undefined;\n      this.lastMeasuredItemIndex = undefined; // this.averageItemHeight = undefined\n      // this.averageItemHeightSamplesCount = undefined\n      // this.previousAverageItemHeight = undefined\n      // this.previousAverageItemHeightSamplesCount = undefined\n    }\n    /**\r\n     * Initializes `this.measuredItemsHeight`, `this.firstMeasuredItemIndex` and\r\n     * `this.lastMeasuredItemIndex` instance variables.\r\n     * These instance variables are used when calculating \"average\" item height:\r\n     * the \"average\" item height is simply `this.measuredItemsHeight` divided by\r\n     * `this.lastMeasuredItemIndex` minus `this.firstMeasuredItemIndex` plus 1.\r\n     * Also, `this.firstMeasuredItemIndex` and `this.lastMeasuredItemIndex`\r\n     * are used to detect \"non-continuous\" scroll: the cases when scroll position\r\n     * jumps from one position to a distant another position. How could that happen?\r\n     * Maybe it can't, but just in case.\r\n     */\n\n  }, {\n    key: \"onInitItemHeights\",\n    value: function onInitItemHeights() {\n      this.reset();\n      var i = 0;\n\n      while (i < this.getState().itemHeights.length) {\n        if (this.getState().itemHeights[i] == undefined) {\n          if (this.firstMeasuredItemIndex !== undefined) {\n            this.lastMeasuredItemIndex = i - 1;\n            break;\n          }\n        } else {\n          if (this.firstMeasuredItemIndex === undefined) {\n            this.firstMeasuredItemIndex = i;\n          }\n\n          this.measuredItemsHeight += this.getState().itemHeights[i];\n        }\n\n        i++;\n      }\n    } // Seems to be no longer used.\n    // getItemHeight(i, firstShownItemIndex) {\n    // \tif (this.get(i)) {\n    // \t\treturn this.get(i)\n    // \t}\n    // \tconst itemHeight = this._getItemHeight(i, firstShownItemIndex)\n    // \tif (itemHeight) {\n    // \t\tthis.set(i, itemHeight)\n    // \t\treturn itemHeight\n    // \t}\n    // \treturn this.getAverage()\n    // }\n\n  }, {\n    key: \"_getItemHeight\",\n    value: function _getItemHeight(i, firstShownItemIndex) {\n      var container = this.getContainerNode();\n\n      if (container) {\n        var nodeIndex = i - firstShownItemIndex;\n\n        if (nodeIndex >= 0 && nodeIndex < container.childNodes.length) {\n          // `offsetHeight` is not precise enough (doesn't return fractional pixels).\n          // let height = container.childNodes[nodeIndex].offsetHeight\n          return container.childNodes[nodeIndex].getBoundingClientRect().height;\n        }\n      }\n    }\n  }, {\n    key: \"getItemSpacing\",\n    value: function getItemSpacing() {\n      var container = this.getContainerNode();\n\n      if (container) {\n        if (container.childNodes.length > 1) {\n          var firstItem = container.childNodes[0];\n          var secondItem = container.childNodes[1];\n          var firstItemRect = firstItem.getBoundingClientRect();\n          var secondItemRect = secondItem.getBoundingClientRect();\n          var spacing = secondItemRect.top - (firstItemRect.top + firstItemRect.height); // Debugging.\n\n          if (window.VirtualScrollerDebug) {\n            log('Item spacing', spacing);\n          }\n\n          return spacing;\n        }\n      }\n    }\n    /**\r\n     * Updates item heights and item spacing.\r\n     * @param  {number} fromIndex\r\n     * @param  {number} toIndex\r\n     * @param  {number} firstShownItemIndex\r\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(fromIndex, toIndex, firstShownItemIndex) {\n      if (this.getState().itemSpacing === undefined) {\n        this.getState().itemSpacing = this.getItemSpacing();\n      } // Reset `this.measuredItemsHeight` if it's not a continuous scroll.\n\n\n      if (this.firstMeasuredItemIndex !== undefined) {\n        if (fromIndex > this.lastMeasuredItemIndex + 1 || toIndex < this.firstMeasuredItemIndex - 1) {\n          // // The previously measured average item height might still be\n          // // more precise if it contains more measured items (\"samples\").\n          // const previousAverageItemHeight = this.averageItemHeight\n          // const previousAverageItemHeightSamplesCount = this.lastMeasuredItemIndex - this.firstMeasuredItemIndex + 1\n          // Reset.\n          this.reset(); // this.previousAverageItemHeight = previousAverageItemHeight\n          // this.previousAverageItemHeightSamplesCount = previousAverageItemHeightSamplesCount\n        }\n      }\n\n      var previousFirstMeasuredItemIndex = this.firstMeasuredItemIndex;\n      var previousLastMeasuredItemIndex = this.lastMeasuredItemIndex;\n      var firstMeasuredItemIndexHasBeenUpdated = false;\n      var i = fromIndex;\n\n      while (i <= toIndex) {\n        // Recalculate item heights because item height might change\n        // after showing it compared to what it was when hiding it.\n        // For example, a YouTube video might have been expanded\n        // and then the item is hidden and it's state is reset\n        // and when it's shown again the YouTube video is not expanded.\n        // if (this.get(i) === undefined) {\n        var height = this._getItemHeight(i, firstShownItemIndex);\n\n        if (height !== undefined) {\n          this.set(i, height); // Update new items height (before).\n\n          if (previousFirstMeasuredItemIndex === undefined || i < previousFirstMeasuredItemIndex) {\n            this.measuredItemsHeight += height; // Update first measured item index.\n\n            if (!firstMeasuredItemIndexHasBeenUpdated) {\n              this.firstMeasuredItemIndex = i;\n              firstMeasuredItemIndexHasBeenUpdated = true;\n            }\n          } // Update new items height (after).\n\n\n          if (previousLastMeasuredItemIndex === undefined || i > previousLastMeasuredItemIndex) {\n            // If `previousLastMeasuredItemIndex` is `undefined`\n            // then `previousFirstMeasuredItemIndex` is also `undefined`\n            // which means that `this.measuredItemsHeight` has already been updated.\n            if (previousLastMeasuredItemIndex !== undefined) {\n              this.measuredItemsHeight += height;\n            } // Update last measured item index.\n\n\n            this.lastMeasuredItemIndex = i;\n          }\n        } // }\n\n\n        i++;\n      } // // Update average item height.\n      // this.updateAverageItemHeight()\n\n    }\n    /**\r\n     * Re-measures item height.\r\n     * @param  {number} i — Item index.\r\n     * @param  {number} firstShownItemIndex\r\n     */\n\n  }, {\n    key: \"updateItemHeight\",\n    value: function updateItemHeight(i, firstShownItemIndex) {\n      var previousHeight = this.get(i);\n\n      var height = this._getItemHeight(i, firstShownItemIndex); // The items might not have rendered at all,\n      // for example, when using React, because\n      // React performs DOM updates asynchronously\n      // and if the user scrolls fast enough\n      // React might not have rendered the item\n      // since it has become visible till it became no longer visible.\n\n\n      if (previousHeight === undefined || height === undefined) {\n        return;\n      }\n\n      this.set(i, height);\n      this.measuredItemsHeight += height - previousHeight;\n    } // /**\n    //  * \"Average\" item height is stored as an instance variable.\n    //  * For example, for caching, so that it isn't calculated every time it's requested.\n    //  * But that would be negligible performance gain, not really worth the extra code.\n    //  * Another thing it's stored for as an instance variable is\n    //  * keeping \"previous\" \"average\" item height, because it can be more precise\n    //  * than the newly calculated \"average\" item height, provided it had\n    //  * more \"samples\" (measured items). The newly calculated average item height\n    //  * could get less samples in a scenario when the scroll somehow jumps\n    //  * from one position to some other distant position: in that case previous\n    //  * \"total measured items height\" is discarded and the new one is initialized.\n    //  * Could such situation happen in real life? I guess, it's unlikely.\n    //  * So I'm commenting out this code, but still keeping it just in case.\n    //  */\n    // updateAverageItemHeight() {\n    // \tthis.averageItemHeightSamplesCount = this.lastMeasuredItemIndex - this.firstMeasuredItemIndex + 1\n    // \tthis.averageItemHeight = this.measuredItemsHeight / this.averageItemHeightSamplesCount\n    // }\n    //\n    // /**\n    //  * Public API: is called by `VirtualScroller`.\n    //  * @return {number}\n    //  */\n    // getAverage() {\n    // \t// Previously measured average item height might still be\n    // \t// more precise if it contains more measured items (\"samples\").\n    // \tif (this.previousAverageItemHeight) {\n    // \t\tif (this.previousAverageItemHeightSamplesCount > this.averageItemHeightSamplesCount) {\n    // \t\t\treturn this.previousAverageItemHeight\n    // \t\t}\n    // \t}\n    // \treturn this.averageItemHeight || 0\n    // }\n\n    /**\r\n     * Public API: is called by `VirtualScroller`.\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"getAverage\",\n    value: function getAverage() {\n      // When `this.measuredItemsHeight` is `0`\n      // then `this.lastMeasuredItemIndex` and `this.firstMeasuredItemIndex` are `undefined`.\n      if (this.measuredItemsHeight) {\n        return this.measuredItemsHeight / (this.lastMeasuredItemIndex - this.firstMeasuredItemIndex + 1);\n      }\n\n      return 0;\n    }\n  }, {\n    key: \"get\",\n    value: function get(i) {\n      return this.getState().itemHeights[i];\n    }\n  }, {\n    key: \"set\",\n    value: function set(i, height) {\n      this.getState().itemHeights[i] = height;\n    }\n  }, {\n    key: \"onPrepend\",\n    value: function onPrepend(count) {\n      if (this.firstMeasuredItemIndex !== undefined) {\n        this.firstMeasuredItemIndex += count;\n        this.lastMeasuredItemIndex += count;\n      }\n    }\n  }]);\n\n  return ItemHeights;\n}();\n\nexport { ItemHeights as default };\n//# sourceMappingURL=ItemHeights.js.map","/**\r\n * Same as `lodash`'s `throttle()` for functions with no arguments.\r\n * @param  {function} func\r\n * @param  {number} interval\r\n * @return {function}\r\n */\nexport function throttle(func, interval) {\n  var timeout;\n  var executedAt = 0;\n\n  var scheduled = function scheduled() {\n    timeout = undefined;\n    executedAt = Date.now();\n    func();\n  };\n\n  return function () {\n    var now = Date.now();\n    var remaining = interval - (now - executedAt);\n\n    if (remaining <= 0) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = undefined;\n      }\n\n      executedAt = now;\n      func();\n    } else if (!timeout) {\n      timeout = setTimeout(scheduled, remaining);\n    }\n  };\n}\n/**\r\n * Rounds coordinates upto 4th decimal place (after dot) and appends \"px\".\r\n * Small numbers could be printed as `\"1.2345e-50\"` unless rounded:\r\n * that would be invalid \"px\" value in CSS.\r\n * @param {number}\r\n * @return {string}\r\n */\n\nexport function px(number) {\n  // Fractional pixels are used on \"retina\" screens.\n  return number.toFixed(2) + 'px';\n}\n//# sourceMappingURL=utility.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shallowEqual from './shallowEqual';\nimport { getOffset, getScrollY, getScreenHeight, getScreenBounds, clearElement } from './DOM';\nimport ItemHeights from './ItemHeights';\nimport log, { isDebug } from './log';\nimport { throttle } from './utility';\nvar START_FROM_INDEX = 0;\nvar WATCH_CONTAINER_ELEMENT_TOP_COORDINATE_INTERVAL = 500;\nvar WATCH_CONTAINER_ELEMENT_TOP_COORDINATE_MAX_DURATION = 3000;\nvar WINDOW_RESIZE_THROTTLE_DURATION = 200;\n\nvar VirtualScroller =\n/*#__PURE__*/\nfunction () {\n  /**\r\n   * @param  {function} getContainerNode — Returns container DOM `Element`.\r\n   * @param  {any[]} items — Are only used for getting items count and for comparing \"previous\" items to \"next\" items if `.setItems(newItems)` is called.\r\n   * @param  {Object} [options] — See README.md.\r\n   * @return {VirtualScroller}\r\n   */\n  function VirtualScroller(getContainerNode, items) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, VirtualScroller);\n\n    _defineProperty(this, \"layout\", function () {\n      return _this.onUpdateShownItemIndexes({\n        reason: 'manual'\n      });\n    });\n\n    _defineProperty(this, \"onScroll\", function () {\n      return _this.onUpdateShownItemIndexes({\n        reason: 'scroll'\n      });\n    });\n\n    _defineProperty(this, \"onResize\", throttle(function () {\n      // Reset item heights because now that window width changed\n      // the list width most likely also has changed, and also\n      // some CSS `@media()` rules might have been added or removed.\n      // Re-render the list entirely.\n      _this.setState(_this.getInitialLayoutState(), function () {\n        _this.onInitialRender('resize');\n      });\n    }, WINDOW_RESIZE_THROTTLE_DURATION));\n\n    _defineProperty(this, \"updateShownItemIndexes\", function (callback) {\n      // Find the items which are displayed in the viewport.\n      var _this$getShownItemInd = _this.getShownItemIndexes(),\n          firstShownItemIndex = _this$getShownItemInd.firstShownItemIndex,\n          lastShownItemIndex = _this$getShownItemInd.lastShownItemIndex,\n          redoLayoutAfterRender = _this$getShownItemInd.redoLayoutAfterRender; // Measure \"before\" items height.\n\n\n      var beforeItemsHeight = _this.getBeforeItemsHeight(firstShownItemIndex, lastShownItemIndex); // Measure \"after\" items height.\n\n\n      var afterItemsHeight = _this.getAfterItemsHeight(firstShownItemIndex, lastShownItemIndex); // Update the heights of items to be hidden on next render.\n      // For example, a user could click a \"Show more\" button,\n      // or an \"Expand YouTube video\" button, which would result\n      // in the list item height changing and `this.itemHeights[i]`\n      // being stale, so it's updated here when hiding the item.\n\n\n      _this.updateWillBeHiddenItemHeightsAndState(firstShownItemIndex, lastShownItemIndex); // Debugging.\n\n\n      log('~ Layout results ' + (_this.bypass ? '(bypass) ' : '') + '~');\n      log('First shown item index', firstShownItemIndex);\n      log('Last shown item index', lastShownItemIndex);\n      log('Before items height', beforeItemsHeight);\n      log('After items height', afterItemsHeight);\n      log('Average item height (calculated on previous render)', _this.itemHeights.getAverage());\n\n      if (isDebug()) {\n        log('Item heights', _this.getState().itemHeights.slice());\n        log('Item states', _this.getState().itemStates.slice());\n      }\n\n      if (redoLayoutAfterRender) {\n        log('Redo layout after render');\n      } // Optionally preload items to be rendered.\n\n\n      _this.onShowItems(firstShownItemIndex, lastShownItemIndex); // Render.\n\n\n      _this.setState({\n        firstShownItemIndex: firstShownItemIndex,\n        lastShownItemIndex: lastShownItemIndex,\n        beforeItemsHeight: beforeItemsHeight,\n        afterItemsHeight: afterItemsHeight // // Average item height is stored in state to differentiate between\n        // // the initial state and \"anything has been measured already\" state.\n        // averageItemHeight: this.itemHeights.getAverage()\n\n      }, function () {\n        return callback(redoLayoutAfterRender);\n      });\n    });\n\n    _defineProperty(this, \"updateShownItemIndexesRecursive\", function () {\n      _this.updateShownItemIndexes(function (redoLayoutAfterRender) {\n        if (redoLayoutAfterRender) {\n          // Recurse in a timeout to prevent React error:\n          // \"Maximum update depth exceeded.\n          //  This can happen when a component repeatedly calls\n          //  setState inside componentWillUpdate or componentDidUpdate.\n          //  React limits the number of nested updates to prevent infinite loops.\"\n          setTimeout(function () {\n            if (_this.isMounted) {\n              _this.updateShownItemIndexesRecursive();\n            } else {\n              _this.onDoneUpdatingItemIndexes();\n            }\n          }, 0);\n        } else {\n          _this.onDoneUpdatingItemIndexes();\n        }\n      });\n    });\n\n    _defineProperty(this, \"restoreScroll\", function () {\n      var _this$restoreScrollAf = _this.restoreScrollAfterPrepend,\n          index = _this$restoreScrollAf.index,\n          screenTop = _this$restoreScrollAf.screenTop;\n      _this.restoreScrollAfterPrepend = undefined;\n\n      var newScreenTop = _this.getItemElement(index).getBoundingClientRect().top;\n\n      var scrollByY = newScreenTop - screenTop;\n\n      if (scrollByY !== 0) {\n        log('Restore scroll position: scroll by', scrollByY);\n        window.scrollTo(0, getScrollY() + scrollByY);\n      }\n    });\n\n    _defineProperty(this, \"onUpdateShownItemIndexes\", function (_ref) {\n      var reason = _ref.reason,\n          force = _ref.force;\n\n      // Not implementing the \"delayed\" layout feature for now.\n      // if (this.delayLayout({ reason, force })) {\n      // \treturn\n      // }\n      //\n      // If there're no items then no need to calculate the layout:\n      // if empty `items` have been set on `state` then it has rendered nothing.\n      if (_this.getItemsCount() === 0) {\n        return;\n      } // If a re-layout is already scheduled then it will happen anyway\n      // for the same `state` so there's no need to start another one.\n\n\n      if (_this.isUpdatingItemIndexes) {\n        return;\n      } // Prefer not re-rendering the list as the user's scrolling.\n      // Instead, prefer delaying such re-renders until the user stops scrolling.\n      //\n      // If the user has scrolled then it means that they haven't\n      // stopped scrolling so cancel the timeout.\n      // Otherwise, a layout happens so no need for the deferred one\n      // so cancel the timeout anyway.\n\n\n      clearTimeout(_this.onUserStopsScrollingTimeout); //\n\n      if (reason === 'scroll') {\n        // See whether rendering new previous/next items is required right now\n        // or it can be deferred until the user stops scrolling for better perceived performance.\n        // const listCoordinates = getOffset(this.getContainerNode())\n        // const { top, height } = listCoordinates\n        // const bottom = top + height\n        // const { top: screenTop, bottom: screenBottom } = getScreenBounds()\n        // const renderedItemsTop = top + this.getState().beforeItemsHeight\n        // const renderedItemsBottom = top + height - this.getState().afterItemsHeight\n        // const forceRender = (screenTop < renderedItemsTop && this.getState().firstShownItemIndex > 0) ||\n        // \t(screenBottom > renderedItemsBottom && this.getState().lastShownItemIndex < this.getItemsCount() - 1)\n        var forceRender = // If the items have been rendered at least one\n        _this.latestLayoutScreenTopAfterMargin !== undefined && // If the user has scrolled up past the extra \"margin\"\n        getScrollY() < _this.latestLayoutScreenTopAfterMargin && // and if there're any previous non-rendered items to render.\n        _this.getState().firstShownItemIndex > 0 || // If the items have been rendered at least one\n        _this.latestLayoutScreenBottomAfterMargin !== undefined && // If the user has scrolled down past the extra \"margin\"\n        getScrollY() + getScreenHeight() > _this.latestLayoutScreenBottomAfterMargin && // and if there're any next non-rendered items to render.\n        _this.getState().lastShownItemIndex < _this.getItemsCount() - 1;\n\n        if (forceRender) {\n          log('The user has scrolled far enough: force re-render');\n        } else {\n          log('The user hasn\\'t scrolled too much: delay re-render');\n        } // \"scroll\" events are usually dispatched every 16 milliseconds\n        // for the 60fps refresh rate, so waiting for 100 milliseconds\n        // is about 6 frames of inactivity which would definitely mean\n        // that either the user's no longer scrolling or the browser's\n        // stuttering (skipping frames due to high load) anyway.\n\n\n        if (!forceRender) {\n          return _this.onUserStopsScrollingTimeout = setTimeout(_this.onUserStoppedScrolling, 100);\n        }\n      } // // A minor optimization. Just because I can.\n      // this.listCoordinatesCached = listCoordinates\n      // Re-render the list.\n\n\n      _this.updateLayout(reason);\n    });\n\n    _defineProperty(this, \"onUserStoppedScrolling\", function () {\n      if (_this.isMounted) {\n        // Re-render the list.\n        _this.updateLayout('stopped scrolling');\n      }\n    });\n\n    var getState = options.getState,\n        setState = options.setState,\n        onStateChange = options.onStateChange,\n        preserveScrollPositionAtBottomOnMount = options.preserveScrollPositionAtBottomOnMount,\n        bypass = options.bypass,\n        bypassBatchSize = options.bypassBatchSize;\n    var estimatedItemHeight = options.estimatedItemHeight,\n        onItemFirstRender = options.onItemFirstRender,\n        state = options.state;\n    log('~ Initialize ~'); // If `state` is passed then use `items` from `state`\n    // instead of the `items` argument.\n\n    if (state) {\n      items = state.items;\n    } // if (margin === undefined) {\n    // \t// Renders items which are outside of the screen by this \"margin\".\n    // \t// Is the screen height by default: seems to be the optimal value\n    // \t// for \"Page Up\" / \"Page Down\" navigation and optimized mouse wheel scrolling.\n    // \tmargin = typeof window === 'undefined' ? 0 : window.innerHeight\n    // }\n    // `bypass` mode could work but turns out that\n    // unmounting large React component trees is a\n    // very long process, so it's still not a viable UX.\n\n\n    this.bypass = bypass;\n    this.bypassBatchSize = bypassBatchSize || 10;\n    this.initialItems = items; // this.margin = margin\n\n    this.estimatedItemHeight = estimatedItemHeight; // this.getItemState = getItemState\n\n    if (onItemFirstRender) {\n      this.onItemFirstRender = onItemFirstRender;\n    } // Remove accidental text nodes from container.\n    // Also guards against cases when someone accidentally tries\n    // using `VirtualScroller` on a non-empty element.\n\n\n    if (getContainerNode()) {\n      clearElement(getContainerNode());\n    }\n\n    if (setState) {\n      this.getState = getState;\n      this.setState = setState;\n    } else {\n      this.getState = function () {\n        return _this.state;\n      };\n\n      this.setState = function (state, callback) {\n        var prevState = _this.state;\n        _this.state = _objectSpread({}, prevState, state);\n\n        if (!shallowEqual(_this.state, prevState)) {\n          if (onStateChange) {\n            onStateChange(_this.state, prevState);\n          }\n\n          if (_this.isMounted) {\n            _this.onUpdate(prevState);\n          }\n        }\n\n        if (callback) {\n          callback();\n        }\n      };\n    }\n\n    if (state) {\n      log('Initial state (passed)', state);\n    }\n\n    this.getContainerNode = getContainerNode;\n    this.itemHeights = new ItemHeights(getContainerNode, this.getState);\n\n    if (preserveScrollPositionAtBottomOnMount) {\n      this.preserveScrollPositionAtBottomOnMount = {\n        documentHeight: document.documentElement.scrollHeight\n      };\n    }\n\n    this.setState(state || this.getInitialState(), function () {\n      _this.itemHeights.onInitItemHeights();\n    });\n    log('Items count', items.length); // log('Start from index', START_FROM_INDEX)\n\n    if (estimatedItemHeight) {\n      log('Estimated item height', estimatedItemHeight);\n    }\n  }\n  /**\r\n   * Returns the initial state of the `VirtualScroller`.\r\n   * @param  {object} [customState] — Any additional \"custom\" state may be stored in `VirtualScroller`'s state. For example, React implementation stores item \"refs\" as \"custom\" state.\r\n   * @return {object}\r\n   */\n\n\n  _createClass(VirtualScroller, [{\n    key: \"getInitialState\",\n    value: function getInitialState(customState) {\n      var itemsCount = this.initialItems.length;\n\n      var state = _objectSpread({}, customState, this.getInitialLayoutState(), {\n        items: this.initialItems,\n        itemStates: new Array(itemsCount)\n      });\n\n      log('Initial state (created)', state);\n      log('First shown item index', state.firstShownItemIndex);\n      log('Last shown item index', state.lastShownItemIndex);\n      return state;\n    }\n  }, {\n    key: \"getInitialLayoutState\",\n    value: function getInitialLayoutState() {\n      var firstShownItemIndex;\n      var lastShownItemIndex;\n      var itemsCount = this.initialItems.length; // If there're no items then `firstShownItemIndex` stays `undefined`.\n\n      if (itemsCount > 0) {\n        firstShownItemIndex = Math.min(START_FROM_INDEX, itemsCount - 1);\n        lastShownItemIndex = this.getLastShownItemIndex(firstShownItemIndex, itemsCount);\n      }\n\n      if (this.preserveScrollPositionAtBottomOnMount) {\n        firstShownItemIndex = 0;\n        lastShownItemIndex = itemsCount - 1;\n      } // Optionally preload items to be rendered.\n\n\n      this.onShowItems(firstShownItemIndex, lastShownItemIndex);\n      return {\n        itemHeights: new Array(itemsCount),\n        itemSpacing: undefined,\n        beforeItemsHeight: 0,\n        afterItemsHeight: 0,\n        firstShownItemIndex: firstShownItemIndex,\n        lastShownItemIndex: lastShownItemIndex\n      };\n    }\n    /**\r\n     * Returns estimated list item height.\r\n     * (depends on which items have been previously rendered and measured).\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"getEstimatedItemHeight\",\n    value: function getEstimatedItemHeight() {\n      return this.itemHeights && this.itemHeights.getAverage() || this.estimatedItemHeight || 0;\n    }\n  }, {\n    key: \"getItemSpacing\",\n    value: function getItemSpacing() {\n      return this.getState().itemSpacing || 0;\n    }\n  }, {\n    key: \"getEstimatedItemsCount\",\n    value: function getEstimatedItemsCount(height) {\n      if (this.getEstimatedItemHeight()) {\n        return Math.ceil((height + this.getItemSpacing()) / (this.getEstimatedItemHeight() + this.getItemSpacing()));\n      } else {\n        return 1;\n      }\n    }\n  }, {\n    key: \"getEstimatedItemsCountOnScreen\",\n    value: function getEstimatedItemsCountOnScreen() {\n      if (typeof window !== 'undefined') {\n        return this.getEstimatedItemsCount(window.innerHeight);\n      } else {\n        return 1;\n      }\n    }\n  }, {\n    key: \"getLastShownItemIndex\",\n    value: function getLastShownItemIndex(firstShownItemIndex, itemsCount) {\n      return Math.min(firstShownItemIndex + (this.getEstimatedItemsCountOnScreen() - 1), itemsCount - 1);\n    }\n  }, {\n    key: \"getItemsCount\",\n    value: function getItemsCount() {\n      return this.getState().items.length;\n    }\n  }, {\n    key: \"getMargin\",\n    value: function getMargin() {\n      // Renders items which are outside of the screen by this \"margin\".\n      // Is the screen height by default: seems to be the optimal value\n      // for \"Page Up\" / \"Page Down\" navigation and optimized mouse wheel scrolling.\n      return window.innerHeight;\n    }\n  }, {\n    key: \"onShowItems\",\n    value: function onShowItems(firstShownItemIndex, lastShownItemIndex) {\n      if (this.onItemFirstRender) {\n        if (this.firstSeenItemIndex === undefined) {\n          var i = firstShownItemIndex;\n\n          while (i <= lastShownItemIndex) {\n            this.onItemFirstRender(i);\n            i++;\n          }\n        } else {\n          if (firstShownItemIndex < this.firstSeenItemIndex) {\n            var _i = firstShownItemIndex;\n\n            while (_i < this.firstSeenItemIndex) {\n              this.onItemFirstRender(_i);\n              _i++;\n            }\n          }\n\n          if (lastShownItemIndex > this.lastSeenItemIndex) {\n            var _i2 = this.lastSeenItemIndex + 1;\n\n            while (_i2 <= lastShownItemIndex) {\n              this.onItemFirstRender(_i2);\n              _i2++;\n            }\n          }\n        }\n\n        this.firstSeenItemIndex = firstShownItemIndex;\n        this.lastSeenItemIndex = lastShownItemIndex;\n      }\n    }\n  }, {\n    key: \"onMount\",\n    value: function onMount() {\n      this.onInitialRender('mount');\n      this.isMounted = true;\n\n      if (!this.bypass) {\n        window.addEventListener('scroll', this.onScroll);\n        window.addEventListener('resize', this.onResize);\n      }\n    }\n  }, {\n    key: \"onInitialRender\",\n    value: function onInitialRender(reason) {\n      var _this$getState = this.getState(),\n          firstShownItemIndex = _this$getState.firstShownItemIndex,\n          lastShownItemIndex = _this$getState.lastShownItemIndex; // If there're any items.\n\n\n      if (this.getItemsCount() > 0) {\n        // Update item heights.\n        this.updateItemHeights(firstShownItemIndex, lastShownItemIndex);\n      }\n\n      if (this.preserveScrollPositionAtBottomOnMount) {\n        // `window.scrollY` and `window.scrollX` aren't supported in Internet Explorer.\n        window.scrollTo(0, window.pageYOffset + (document.documentElement.scrollHeight - this.preserveScrollPositionAtBottomOnMount.documentHeight));\n      } else {\n        this.onUpdateShownItemIndexes({\n          reason: reason\n        });\n      }\n    }\n  }, {\n    key: \"onUnmount\",\n    value: function onUnmount() {\n      this.isMounted = false;\n\n      if (!this.bypass) {\n        window.removeEventListener('scroll', this.onScroll);\n        window.removeEventListener('resize', this.onResize);\n        clearTimeout(this.onUserStopsScrollingTimeout);\n        clearTimeout(this.watchContainerElementTopCoordinateTimer);\n      }\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(prevState) {\n      var _this$getState2 = this.getState(),\n          items = _this$getState2.items,\n          firstShownItemIndex = _this$getState2.firstShownItemIndex,\n          lastShownItemIndex = _this$getState2.lastShownItemIndex; // If new items are shown (or older items are hidden).\n\n\n      if (firstShownItemIndex !== prevState.firstShownItemIndex || lastShownItemIndex !== prevState.lastShownItemIndex || items !== prevState.items) {\n        // // If some items' height changed then maybe adjust scroll position accordingly.\n        // const prevItemHeights = this.getState().itemHeights.slice()\n        // Update seen item heights.\n        this.updateItemHeights(firstShownItemIndex, lastShownItemIndex); // let i = firstShownItemIndex\n        // while (i <= lastShownItemIndex) {\n        // \tthis.adjustScrollPositionIfNeeded(i, prevItemHeights[i])\n        // \ti++\n        // }\n      }\n    }\n  }, {\n    key: \"updateItemHeights\",\n    value: function updateItemHeights(fromIndex, toIndex) {\n      var _this$getState3 = this.getState(),\n          firstShownItemIndex = _this$getState3.firstShownItemIndex;\n\n      if (fromIndex !== undefined) {\n        log('~ Measure item heights after layout ~');\n        this.itemHeights.update(fromIndex, toIndex, firstShownItemIndex);\n\n        if (isDebug()) {\n          log('Item heights', this.getState().itemHeights.slice());\n        }\n      }\n    }\n  }, {\n    key: \"updateItemHeight\",\n    value: function updateItemHeight(i) {\n      var _this$getState4 = this.getState(),\n          firstShownItemIndex = _this$getState4.firstShownItemIndex;\n\n      this.itemHeights.updateItemHeight(i, firstShownItemIndex);\n    }\n  }, {\n    key: \"onItemStateChange\",\n    value: function onItemStateChange(i, itemState) {\n      if (isDebug()) {\n        log('~ Item state changed ~');\n        log('Item', i);\n        log('Previous state' + '\\n' + JSON.stringify(this.getState().itemStates[i], null, 2));\n        log('New state' + '\\n' + JSON.stringify(itemState, null, 2));\n      }\n\n      this.getState().itemStates[i] = itemState;\n    }\n  }, {\n    key: \"onItemHeightChange\",\n    value: function onItemHeightChange(i) {\n      var _this$getState5 = this.getState(),\n          itemHeights = _this$getState5.itemHeights;\n\n      var previousHeight = itemHeights[i];\n      this.updateItemHeight(i);\n      var newHeight = itemHeights[i];\n\n      if (previousHeight !== newHeight) {\n        log('~ Item height changed ~');\n        log('Item', i);\n        log('Previous height', previousHeight);\n        log('New height', newHeight);\n        this.onUpdateShownItemIndexes({\n          reason: 'item height change'\n        });\n      }\n    }\n    /**\r\n     * Returns coordinates of item with index `i` relative to the document.\r\n     * `top` is the top offset of the item relative to the start of the document.\r\n     * `bottom` is the top offset of the item's bottom edge relative to the start of the document.\r\n     * `height` is the item's height.\r\n     * @param  {number} i\r\n     * @return {object} coordinates — An object of shape `{ top, bottom, height }`.\r\n     */\n\n  }, {\n    key: \"getItemCoordinates\",\n    value: function getItemCoordinates(i) {\n      var _getOffset = getOffset(this.getContainerNode()),\n          top = _getOffset.top;\n\n      var j = 0;\n\n      while (j < i) {\n        top += this.getState().itemHeights[j];\n        top += this.getItemSpacing();\n        j++;\n      }\n\n      return {\n        top: top,\n        bottom: top + this.getState().itemHeights[i],\n        height: this.getState().itemHeights[j]\n      };\n    } // Finds the items which are displayed in the viewport.\n\n  }, {\n    key: \"getVisibleItemIndexes\",\n    value: function getVisibleItemIndexes(screenTop, screenBottom, listTop) {\n      var showItemsFromIndex;\n      var showItemsToIndex;\n      var itemsHeight = 0;\n      var redoLayoutAfterRender = false;\n      var i = START_FROM_INDEX;\n\n      while (i < this.getItemsCount()) {\n        var height = this.itemHeights.get(i); // If an item that hasn't been shown (and measured) yet is encountered\n        // then show such item and then retry after it has been measured.\n\n        if (height === undefined) {\n          log(\"Item \".concat(i, \" height hasn't been measured yet: render and redo layout\"));\n\n          if (showItemsFromIndex === undefined) {\n            showItemsFromIndex = i;\n          }\n\n          var heightLeft = screenBottom - (listTop + itemsHeight);\n          showItemsToIndex = Math.min(i + (this.getEstimatedItemsCount(heightLeft) - 1), // Guard against index overflow.\n          this.getItemsCount() - 1);\n          redoLayoutAfterRender = true;\n          break;\n        }\n\n        itemsHeight += height; // If this is the first item visible\n        // then start showing items from it.\n\n        if (showItemsFromIndex === undefined) {\n          if (listTop + itemsHeight > screenTop) {\n            log('First visible item index (including margin)', i);\n            showItemsFromIndex = i;\n          }\n        } // Items can have spacing.\n\n\n        if (i < this.getItemsCount() - 1) {\n          itemsHeight += this.getItemSpacing();\n        } // If this item is the last one visible in the viewport then exit.\n\n\n        if (listTop + itemsHeight > screenBottom) {\n          log('Last visible item index (including margin)', i); // The list height is estimated until all items have been seen,\n          // so it's possible that even when the list DOM element happens\n          // to be in the viewport in reality the list isn't visible\n          // in which case `showItemsFromIndex` will be `undefined`.\n\n          if (showItemsFromIndex !== undefined) {\n            showItemsToIndex = i;\n          }\n\n          break;\n        }\n\n        i++;\n      } // If there're no more items then the last item is the last one to show.\n\n\n      if (showItemsFromIndex !== undefined && showItemsToIndex === undefined) {\n        showItemsToIndex = this.getItemsCount() - 1;\n        log('Last item index (is fully visible)', showItemsToIndex);\n      } // If scroll position is scheduled to be restored\n      // after render then the anchor item must be rendered\n      // and all the prepended items before it.\n\n\n      if (this.restoreScrollAfterPrepend) {\n        if (showItemsToIndex < this.restoreScrollAfterPrepend.index) {\n          showItemsToIndex = this.restoreScrollAfterPrepend.index;\n        } // `showItemsFromIndex` is always `0` when prepending items.\n        // No need to redo layout after render because all\n        // prepended items are rendered in a single pass.\n        // It removes the visual jitter otherwise happening\n        // due to scroll position restoration waiting for\n        // two layout cycles instead of one.\n\n\n        redoLayoutAfterRender = false;\n      }\n\n      return {\n        firstShownItemIndex: showItemsFromIndex,\n        lastShownItemIndex: showItemsToIndex,\n        redoLayoutAfterRender: redoLayoutAfterRender\n      };\n    }\n  }, {\n    key: \"getOffscreenListShownItemIndexes\",\n    value: function getOffscreenListShownItemIndexes() {\n      var i = START_FROM_INDEX;\n      return {\n        firstShownItemIndex: i,\n        lastShownItemIndex: i,\n        redoLayoutAfterRender: this.itemHeights.get(i) === undefined\n      };\n    }\n  }, {\n    key: \"getItemIndexes\",\n    value: function getItemIndexes(screenTop, screenBottom, top, bottom) {\n      var isVisible = bottom > screenTop && top < screenBottom;\n\n      if (!isVisible) {\n        return this.getOffscreenListShownItemIndexes();\n      } // Find the items which are displayed in the viewport.\n\n\n      var indexes = this.getVisibleItemIndexes(screenTop, screenBottom, top); // The list height is estimated until all items have been seen,\n      // so it's possible that even when the list DOM element happens\n      // to be in the viewport in reality the list isn't visible\n      // in which case `firstShownItemIndex` will be `undefined`.\n\n      if (indexes.firstShownItemIndex === undefined) {\n        return this.getOffscreenListShownItemIndexes();\n      }\n\n      return indexes;\n    }\n    /**\r\n     * Measures \"before\" items height.\r\n     * @param  {number} firstShownItemIndex — New first shown item index.\r\n     * @param  {number} lastShownItemIndex — New last shown item index.\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"getBeforeItemsHeight\",\n    value: function getBeforeItemsHeight(firstShownItemIndex, lastShownItemIndex) {\n      var beforeItemsHeight = 0; // Add all \"before\" items height.\n\n      var i = START_FROM_INDEX;\n\n      while (i < firstShownItemIndex) {\n        beforeItemsHeight += this.itemHeights.get(i) || this.itemHeights.getAverage();\n        beforeItemsHeight += this.getItemSpacing();\n        i++;\n      }\n\n      return beforeItemsHeight;\n    }\n    /**\r\n     * Measures \"after\" items height.\r\n     * @param  {number} firstShownItemIndex — New first shown item index.\r\n     * @param  {number} lastShownItemIndex — New last shown item index.\r\n     * @return {number}\r\n     */\n\n  }, {\n    key: \"getAfterItemsHeight\",\n    value: function getAfterItemsHeight(firstShownItemIndex, lastShownItemIndex) {\n      var afterItemsHeight = 0;\n      var i = lastShownItemIndex + 1; // Add all \"after\" items height.\n\n      while (i < this.getItemsCount()) {\n        afterItemsHeight += this.getItemSpacing();\n        afterItemsHeight += this.itemHeights.get(i) || this.itemHeights.getAverage();\n        i++;\n      }\n\n      return afterItemsHeight;\n    }\n    /**\r\n     * Updates the heights of items to be hidden on next render.\r\n     * For example, a user could click a \"Show more\" button,\r\n     * or an \"Expand YouTube video\" button, which would result\r\n     * in the list item height changing and `this.itemHeights[i]`\r\n     * being stale, so it's updated here when hiding the item.\r\n     */\n\n  }, {\n    key: \"updateWillBeHiddenItemHeightsAndState\",\n    value: function updateWillBeHiddenItemHeightsAndState(firstShownItemIndex, lastShownItemIndex) {\n      var i = this.getState().firstShownItemIndex;\n\n      while (i <= this.getState().lastShownItemIndex) {\n        if (i >= firstShownItemIndex && i <= lastShownItemIndex) {// The item's still visible.\n        } else {\n          // Update item's height before hiding it\n          // because the height of the item may have changed\n          // while it was visible.\n          this.updateItemHeight(i); // // Update item's state because it's about to be hidden.\n          // if (this.getItemState) {\n          // \tthis.getState().itemStates[i] = this.getItemState(\n          // \t\tthis.getState().items[i],\n          // \t\ti,\n          // \t\tthis.getState().items\n          // \t)\n          // }\n        }\n\n        i++;\n      }\n    } // `VirtualScroller` calls `getShownItemIndexes()` on mount\n    // but if the page styles are applied after `VirtualScroller` mounts\n    // (for example, if styles are applied via javascript, like Webpack does)\n    // then the list might not render correctly and will only show the first item.\n    // The reason for that would be that calling `.getBoundingClientRect()`\n    // on the list container element on mount returned \"incorrect\" `top` position\n    // because the styles haven't been applied yet.\n    // For example, consider a page:\n    // <div class=\"page\">\n    //   <nav class=\"sidebar\">...</nav>\n    //   <main>...</main>\n    // </div>\n    // The sidebar is styled as `position: fixed`, but until\n    // the page styles have been applied it's gonna be a regular `<div/>`\n    // meaning that `<main/>` will be rendered below the sidebar\n    // and will appear offscreen and so it will only render the first item.\n    // Then, the page styles are loaded and applied and the sidebar\n    // is now `position: fixed` so `<main/>` is now rendered at the top of the page\n    // but `VirtualScroller`'s `onMount()` has already been called\n    // and it won't re-render until the user scrolls or the window is resized.\n    // This type of a bug doesn't occur in production, but it can appear\n    // in development mode when using Webpack. The workaround `VirtualScroller`\n    // implements for such cases is calling `.getBoundingClientRect()` on the\n    // list container DOM element periodically (every second) to check if the\n    // `top` coordinate has changed as a result of CSS being applied:\n    // if it has then it recalculates the shown item indexes.\n\n  }, {\n    key: \"watchContainerElementTopCoordinate\",\n    value: function watchContainerElementTopCoordinate() {\n      var _this2 = this;\n\n      var startedAt = Date.now();\n\n      var check = function check() {\n        // Skip comparing `top` coordinate of the list\n        // when this function is called the first time.\n        if (_this2.top !== undefined) {\n          // Calling `getOffset()` on an element is about\n          // 0.003 milliseconds on a modern desktop CPU,\n          // so I guess it's fine calling it twice a second.\n          var _getOffset2 = getOffset(_this2.getContainerNode()),\n              top = _getOffset2.top;\n\n          if (top !== _this2.top) {\n            _this2.onUpdateShownItemIndexes({\n              reason: 'top offset change'\n            });\n          }\n        } // Compare `top` coordinate of the list twice a second\n        // to find out if it has changed as a result of loading CSS styles.\n        // The total duration of 3 seconds would be enough for any styles to load, I guess.\n        // There could be other cases changing the `top` coordinate\n        // of the list (like collapsing an \"accordeon\" panel above the list\n        // without scrolling the page), but those cases should be handled\n        // by manually calling `.layout()` instance method on `VirtualScroller` instance.\n\n\n        if (Date.now() - startedAt < WATCH_CONTAINER_ELEMENT_TOP_COORDINATE_MAX_DURATION) {\n          _this2.watchContainerElementTopCoordinateTimer = setTimeout(check, WATCH_CONTAINER_ELEMENT_TOP_COORDINATE_INTERVAL);\n        }\n      }; // Run the cycle.\n\n\n      check();\n    }\n    /**\r\n     * Finds the items that are displayed in the viewport.\r\n     * @return {object} `{ firstShownItemIndex: number, lastShownItemIndex: number, redoLayoutAfterRender: boolean }`\r\n     */\n\n  }, {\n    key: \"getShownItemIndexes\",\n    value: function getShownItemIndexes() {\n      if (this.bypass) {\n        var _this$getState6 = this.getState(),\n            firstShownItemIndex = _this$getState6.firstShownItemIndex;\n\n        var _this$getState7 = this.getState(),\n            lastShownItemIndex = _this$getState7.lastShownItemIndex;\n\n        lastShownItemIndex = Math.min(lastShownItemIndex + this.bypassBatchSize, this.getItemsCount() - 1);\n        return {\n          firstShownItemIndex: firstShownItemIndex,\n          lastShownItemIndex: lastShownItemIndex,\n          // Redo layout untill all items are rendered.\n          redoLayoutAfterRender: lastShownItemIndex < this.getItemsCount() - 1\n        };\n      } // // A minor optimization. Just because I can.\n      // let listCoordinates\n      // if (this.listCoordinatesCached) {\n      // \tlistCoordinates = this.listCoordinatesCached\n      // \tthis.listCoordinatesCached = undefined\n      // } else {\n      // \tlistCoordinates = getOffset(this.getContainerNode())\n      // }\n      // const { top, height } = listCoordinates\n\n\n      var _getOffset3 = getOffset(this.getContainerNode()),\n          top = _getOffset3.top,\n          height = _getOffset3.height; // `this.top` is not used for any \"caching\",\n      // it's only used in `this.watchContainerElementTopCoordinate()` method.\n\n\n      if (this.top === undefined) {\n        // See the comments for `watchContainerElementTopCoordinate()` method\n        // for the rationale on why it's here.\n        this.watchContainerElementTopCoordinate();\n      }\n\n      this.top = top;\n\n      var _getScreenBounds = getScreenBounds(),\n          screenTop = _getScreenBounds.top,\n          screenBottom = _getScreenBounds.bottom; // Set screen top and bottom for current layout.\n\n\n      this.latestLayoutScreenTopAfterMargin = screenTop - this.getMargin();\n      this.latestLayoutScreenBottomAfterMargin = screenBottom + this.getMargin(); // Find the items that are displayed in the viewport.\n\n      return this.getItemIndexes(screenTop - this.getMargin(), screenBottom + this.getMargin(), top, top + height);\n    }\n    /**\r\n     * Updates the \"from\" and \"to\" shown item indexes.\r\n     * `callback(redoLayoutAfterRender)` is called after it re-renders.\r\n     * If the list is visible and some of the items being shown are new\r\n     * and required to be measured first then `redoLayoutAfterRender` is `true`.\r\n     * If the list is visible and all items being shown have been encountered\r\n     * (and measured) before then `redoLayoutAfterRender` is `false`.\r\n     * @param {Function} callback\r\n     */\n\n  }, {\n    key: \"onDoneUpdatingItemIndexes\",\n    value: function onDoneUpdatingItemIndexes() {\n      this.isUpdatingItemIndexes = false;\n\n      if (this.restoreScrollAfterPrepend) {\n        this.restoreScroll();\n      }\n    }\n  }, {\n    key: \"captureScroll\",\n    value: function captureScroll(previousItems, nextItems, firstPreviousItemIndex) {\n      // If there were no items in the list\n      // then there's no point in restoring scroll position.\n      if (previousItems.length === 0) {\n        return;\n      }\n\n      if (firstPreviousItemIndex === undefined) {\n        firstPreviousItemIndex = nextItems.indexOf(previousItems[0]);\n      } // If the items update wasn't incremental\n      // then there's no point in restoring scroll position.\n\n\n      if (firstPreviousItemIndex < 0) {\n        return;\n      } // If no items were prepended then no need to restore scroll position.\n\n\n      if (firstPreviousItemIndex === 0) {\n        return;\n      } // The first item DOM Element must be rendered in order to get its top position.\n\n\n      if (this.getState().firstShownItemIndex > 0) {\n        return;\n      } // If the scroll position for these `previousItems` -> `nextItems`\n      // has already been captured then skip.\n      // This could happen when using `<ReactVirtualScroller/>`\n      // because it calls `.captureScroll()` inside `.render()`\n      // which is followed by `<VirtualScroller/>`'s `.componentDidUpdate()`\n      // which also calls `.captureScroll()` with the same arguments.\n      // (this is done to prevent scroll Y position from jumping\n      //  when showing the first page of the \"Previous items\",\n      //  see the comments in `<ReactVirtualScroller/>`'s `.render()` method).\n\n\n      if (this.restoreScrollAfterPrepend && this.restoreScrollAfterPrepend.previousItems === previousItems && this.restoreScrollAfterPrepend.nextItems === nextItems) {\n        return;\n      }\n\n      this.restoreScrollAfterPrepend = {\n        previousItems: previousItems,\n        nextItems: nextItems,\n        index: firstPreviousItemIndex,\n        screenTop: this.getItemElement(0).getBoundingClientRect().top\n      };\n    }\n  }, {\n    key: \"updateLayout\",\n    value: function updateLayout(reason) {\n      log(\"~ Update layout (\".concat(reason, \") ~\"));\n      this.isUpdatingItemIndexes = true;\n      this.updateShownItemIndexesRecursive();\n    }\n  }, {\n    key: \"updateItems\",\n\n    /**\r\n     * @deprecated\r\n     * `.updateItems()` has been renamed to `.setItems()`.\r\n     */\n    value: function updateItems(newItems, options) {\n      return this.setItems(newItems, options);\n    }\n    /**\r\n     * Updates `items`. For example, can prepend or append new items to the list.\r\n     * @param  {any[]} newItems\r\n     * @param {boolean} [options.preserveScrollPositionOnPrependItems] — Set to `true` to enable \"restore scroll position after prepending items\" feature (could be useful when implementing \"Show previous items\" button).\r\n     */\n\n  }, {\n    key: \"setItems\",\n    value: function setItems(newItems) {\n      var _this3 = this;\n\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // * @param  {object} [newCustomState] — If `customState` was passed to `getInitialState()`, this `newCustomState` updates it.\n      var _this$getState8 = this.getState(),\n          previousItems = _this$getState8.items;\n\n      var _this$getState9 = this.getState(),\n          firstShownItemIndex = _this$getState9.firstShownItemIndex,\n          lastShownItemIndex = _this$getState9.lastShownItemIndex,\n          beforeItemsHeight = _this$getState9.beforeItemsHeight,\n          afterItemsHeight = _this$getState9.afterItemsHeight,\n          itemStates = _this$getState9.itemStates,\n          itemHeights = _this$getState9.itemHeights,\n          itemSpacing = _this$getState9.itemSpacing;\n\n      log('~ Update items ~');\n\n      var _getItemsDiff = getItemsDiff(previousItems, newItems),\n          prependedItemsCount = _getItemsDiff.prependedItemsCount,\n          appendedItemsCount = _getItemsDiff.appendedItemsCount;\n\n      var isIncrementalUpdate = prependedItemsCount > 0 || appendedItemsCount > 0;\n\n      if (isIncrementalUpdate) {\n        if (prependedItemsCount > 0) {\n          log('Prepended items count', prependedItemsCount);\n\n          if (this.firstSeenItemIndex !== undefined) {\n            this.firstSeenItemIndex += prependedItemsCount;\n          }\n\n          itemHeights = new Array(prependedItemsCount).concat(itemHeights);\n          this.itemHeights.onPrepend(prependedItemsCount);\n\n          if (itemStates) {\n            itemStates = new Array(prependedItemsCount).concat(itemStates);\n          } // Since some items were prepended restore scroll Y\n          // position after rendering those new items.\n          // `preserveScrollPosition` property name is deprecated,\n          // use `preserveScrollPositionOnPrependItems` instead.\n\n\n          if (options.preserveScrollPositionOnPrependItems || options.preserveScrollPosition) {\n            this.captureScroll(previousItems, newItems, prependedItemsCount);\n          }\n        }\n\n        if (appendedItemsCount > 0) {\n          log('Appended items count', appendedItemsCount);\n          itemHeights = itemHeights.concat(new Array(appendedItemsCount));\n\n          if (itemStates) {\n            itemStates = itemStates.concat(new Array(appendedItemsCount));\n          }\n        }\n\n        firstShownItemIndex += prependedItemsCount;\n        lastShownItemIndex += prependedItemsCount;\n        beforeItemsHeight += this.itemHeights.getAverage() * prependedItemsCount;\n        afterItemsHeight += this.itemHeights.getAverage() * appendedItemsCount;\n      } else {\n        log('Non-incremental items update');\n        log('Previous items', previousItems);\n        log('New items', newItems);\n        itemHeights = new Array(newItems.length);\n        itemStates = new Array(newItems.length);\n\n        if (newItems.length === 0) {\n          firstShownItemIndex = undefined;\n          lastShownItemIndex = undefined;\n        } else {\n          firstShownItemIndex = 0;\n          lastShownItemIndex = this.getLastShownItemIndex(firstShownItemIndex, newItems.length);\n        }\n\n        beforeItemsHeight = 0;\n        afterItemsHeight = 0;\n      }\n\n      var customState; // `newCustomState` argument is not currently being used.\n      // if (newCustomState) {\n      // \tif (typeof newCustomState === 'function') {\n      // \t\tcustomState = newCustomState(this.getState(), {\n      // \t\t\tprependedCount: isIncrementalUpdate ? undefined : prependedItemsCount,\n      // \t\t\tappendedCount: isIncrementalUpdate ? undefined : appendedItemsCount\n      // \t\t})\n      // \t} else {\n      // \t\tcustomState = newCustomState\n      // \t}\n      // }\n\n      log('First shown item index', firstShownItemIndex);\n      log('Last shown item index', lastShownItemIndex);\n      log('Before items height', beforeItemsHeight);\n      log('After items height', afterItemsHeight); // Optionally preload items to be rendered.\n\n      this.onShowItems(firstShownItemIndex, lastShownItemIndex); // Render.\n\n      this.setState(_objectSpread({}, customState, {\n        items: newItems,\n        itemStates: itemStates,\n        itemHeights: itemHeights,\n        firstShownItemIndex: firstShownItemIndex,\n        lastShownItemIndex: lastShownItemIndex,\n        beforeItemsHeight: beforeItemsHeight,\n        afterItemsHeight: afterItemsHeight\n      }), function () {\n        if (!isIncrementalUpdate) {\n          _this3.firstSeenItemIndex = undefined;\n          _this3.lastSeenItemIndex = undefined;\n\n          _this3.itemHeights.onInitItemHeights();\n        }\n\n        _this3.onUpdateShownItemIndexes({\n          reason: 'update items',\n          force: true\n        });\n      });\n    }\n  }, {\n    key: \"getItemElement\",\n    value: function getItemElement(i) {\n      return this.getContainerNode().childNodes[i];\n    } // Turns out this optimization won't work\n    // because sometimes item height is an average approximation\n    // and the other times it's the real item height\n    // and sometimes it can change while item's not visible.\n    // /**\n    //  * Measures new \"before\" items height.\n    //  * @param  {number} firstShownItemIndex — New first shown item index.\n    //  * @param  {number} lastShownItemIndex — New last shown item index.\n    //  * @return {number}\n    //  */\n    // getBeforeItemsHeightOptimized(firstShownItemIndex, lastShownItemIndex) {\n    // \t// If the previous and new shown item indexes intersect\n    // \t// then the new \"before\" items height may be calculated\n    // \t// based on the previous \"before\" items height.\n    // \tif (this.getState().averageItemHeight !== undefined &&\n    // \t\tthis.doPrevAndNextItemIndexesIntersect(firstShownItemIndex, lastShownItemIndex)) {\n    // \t\tlet beforeItemsHeight = this.getState().beforeItemsHeight\n    // \t\t// Add all \"before\" will-be-hidden items' height.\n    // \t\tlet i = this.getState().firstShownItemIndex\n    // \t\twhile (i <= this.getState().lastShownItemIndex && i < firstShownItemIndex) {\n    // \t\t\tbeforeItemsHeight += (this.itemHeights.get(i) || this.itemHeights.getAverage())\n    // \t\t\tbeforeItemsHeight += this.getItemSpacing()\n    // \t\t\ti++\n    // \t\t}\n    // \t\t// Subtract all \"before\" will-be-shown items' height.\n    // \t\ti = firstShownItemIndex\n    // \t\twhile (i <= lastShownItemIndex && i < this.getState().firstShownItemIndex) {\n    // \t\t\tbeforeItemsHeight -= (this.itemHeights.get(i) || this.itemHeights.getAverage())\n    // \t\t\tbeforeItemsHeight -= this.getItemSpacing()\n    // \t\t\ti++\n    // \t\t}\n    // \t\treturn beforeItemsHeight\n    // \t}\n    // \t// If the previous and new shown item indexes don't intersect\n    // \t// then re-calculate \"before\" items height.\n    // \telse {\n    // \t\treturn this.getBeforeItemsHeight(firstShownItemIndex, lastShownItemIndex)\n    // \t}\n    // }\n    // Turns out this optimization won't work\n    // because sometimes item height is an average approximation\n    // and the other times it's the real item height\n    // and sometimes it can change while item's not visible.\n    // /**\n    //  * Measures new \"after\" items height.\n    //  * @param  {number} firstShownItemIndex — New first shown item index.\n    //  * @param  {number} lastShownItemIndex — New last shown item index.\n    //  * @return {number}\n    //  */\n    // getAfterItemsHeightOptimized(firstShownItemIndex, lastShownItemIndex) {\n    // \t// If the previous and new shown item indexes intersect\n    // \t// then the new \"after\" items height may be calculated\n    // \t// based on the previous \"after\" items height.\n    // \tif (this.getState().averageItemHeight !== undefined &&\n    // \t\tthis.doPrevAndNextItemIndexesIntersect(firstShownItemIndex, lastShownItemIndex)) {\n    // \t\tlet afterItemsHeight = this.getState().afterItemsHeight\n    // \t\t// Add all \"after\" will-be-hidden items' height.\n    // \t\tlet i = this.getState().lastShownItemIndex\n    // \t\twhile (i >= this.getState().firstShownItemIndex && i > lastShownItemIndex) {\n    // \t\t\tafterItemsHeight += (this.itemHeights.get(i) || this.itemHeights.getAverage())\n    // \t\t\tafterItemsHeight += this.getItemSpacing()\n    // \t\t\ti--\n    // \t\t}\n    // \t\t// Subtract all \"after\" will-be-shown items' height.\n    // \t\ti = lastShownItemIndex\n    // \t\twhile (i >= firstShownItemIndex && i > this.getState().lastShownItemIndex) {\n    // \t\t\tafterItemsHeight -= (this.itemHeights.get(i) || this.itemHeights.getAverage())\n    // \t\t\tafterItemsHeight -= this.getItemSpacing()\n    // \t\t\ti--\n    // \t\t}\n    // \t\treturn afterItemsHeight\n    // \t}\n    // \t// If the previous and new shown item indexes don't intersect\n    // \t// then re-calculate \"after\" items height.\n    // \telse {\n    // \t\treturn this.getAfterItemsHeight(firstShownItemIndex, lastShownItemIndex)\n    // \t}\n    // }\n    // Was used it `.getBeforeItemsHeightOptimized()` and `.getAfterItemsHeightOptimized()`.\n    // doPrevAndNextItemIndexesIntersect(firstShownItemIndex, lastShownItemIndex) {\n    // \treturn firstShownItemIndex <= this.getState().lastShownItemIndex &&\n    // \t\tlastShownItemIndex >= this.getState().firstShownItemIndex\n    // }\n    // Not implementing the \"delayed\" layout feature for now.\n    // delayLayout(args) {\n    // \t// Suppose there's a \"router\" library which restores scroll position\n    // \t// on \"Back\" navigation but only does so after `componentDidMount()`\n    // \t// is called on the underlying page meaning that by the time\n    // \t// the scroll position is restored the `VirtualScroller` component\n    // \t// has already rendered with previous page's scroll position\n    // \t// resulting in an unnecessary layout. \"Delaying\" layout\n    // \t// means that the layout is called in a `setTimeout(..., 0)` call\n    // \t// rather than immediately on mount.\n    // \tif (this.shouldDelayLayout) {\n    // \t\tthis.layoutDelayedWithArgs = args\n    // \t\t// Then in `.onMount()`:\n    // \t\t// if (this.layoutDelayedWithArgs) {\n    // \t\t// \tthis.shouldDelayLayout = false\n    // \t\t// \tsetTimeout(() => {\n    // \t\t// \t\tif (this.isMounted) {\n    // \t\t// \t\t\tthis.onUpdateShownItemIndexes(this.layoutDelayedWithArgs)\n    // \t\t// \t\t\tthis.layoutDelayedWithArgs = undefined\n    // \t\t// \t\t}\n    // \t\t// \t}, 0)\n    // \t\t// }\n    // \t\treturn true\n    // \t}\n    // }\n\n  }]);\n\n  return VirtualScroller;\n}();\n\nexport { VirtualScroller as default };\n\nfunction getRemainderRest(n, divider) {\n  var remainder = n % divider;\n\n  if (remainder > 0) {\n    return divider - remainder;\n  }\n\n  return 0;\n}\n\nexport function getItemsDiff(previousItems, newItems) {\n  var firstPreviousItemIndex = -1;\n  var lastPreviousItemIndex = -1;\n\n  if (previousItems.length > 0) {\n    firstPreviousItemIndex = newItems.indexOf(previousItems[0]);\n\n    if (firstPreviousItemIndex >= 0) {\n      if (arePreviousItemsPreserved(previousItems, newItems, firstPreviousItemIndex)) {\n        lastPreviousItemIndex = firstPreviousItemIndex + previousItems.length - 1;\n      }\n    }\n  }\n\n  var isIncrementalUpdate = firstPreviousItemIndex >= 0 && lastPreviousItemIndex >= 0;\n\n  if (isIncrementalUpdate) {\n    return {\n      prependedItemsCount: firstPreviousItemIndex,\n      appendedItemsCount: newItems.length - (lastPreviousItemIndex + 1)\n    };\n  }\n\n  return {\n    prependedItemsCount: -1,\n    appendedItemsCount: -1\n  };\n}\n\nfunction arePreviousItemsPreserved(previousItems, newItems, offset) {\n  // Check each item of the `previousItems` to determine\n  // whether it's an \"incremental\" items update.\n  // (an update when items are prepended or appended)\n  var i = 0;\n\n  while (i < previousItems.length) {\n    if (newItems.length <= offset + i || newItems[offset + i] !== previousItems[i]) {\n      return false;\n    }\n\n    i++;\n  }\n\n  return true;\n}\n//# sourceMappingURL=VirtualScroller.js.map","function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport VirtualScroller from './VirtualScroller';\nimport log from './log';\nimport { px } from './utility';\n\nvar DOMVirtualScroller =\n/*#__PURE__*/\nfunction () {\n  function DOMVirtualScroller(element, _items, renderItem) {\n    var _this = this;\n\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    _classCallCheck(this, DOMVirtualScroller);\n\n    _defineProperty(this, \"onStateChange\", function (state, prevState) {\n      var items = state.items,\n          firstShownItemIndex = state.firstShownItemIndex,\n          lastShownItemIndex = state.lastShownItemIndex,\n          beforeItemsHeight = state.beforeItemsHeight,\n          afterItemsHeight = state.afterItemsHeight;\n      log('~ On state change ~');\n      log('Previous state', prevState);\n      log('New state', state); // Set container padding top and bottom.\n\n      _this.container.style.paddingTop = px(beforeItemsHeight);\n      _this.container.style.paddingBottom = px(afterItemsHeight); // Perform an intelligent \"diff\" re-render if the `items` are the same.\n\n      var diffRender = prevState && items === prevState.items && prevState.items.length > 0; // Remove no longer visible items from the DOM.\n\n      if (diffRender) {\n        log('Incremental render'); // Decrement instead of increment here because\n        // `this.container.removeChild()` changes indexes.\n\n        var _i = prevState.lastShownItemIndex;\n\n        while (_i >= prevState.firstShownItemIndex) {\n          if (_i >= firstShownItemIndex && _i <= lastShownItemIndex) {// The item is still being shown.\n          } else {\n            log('Remove item', _i); // The item is no longer visible so remove it from the DOM.\n\n            var item = _this.container.childNodes[_i - prevState.firstShownItemIndex];\n\n            _this.container.removeChild(item);\n          }\n\n          _i--;\n        }\n      } else {\n        log('Clean render');\n\n        while (_this.container.firstChild) {\n          _this.container.removeChild(_this.container.firstChild);\n        }\n      } // Add newly visible items to the DOM.\n\n\n      var shouldPrependItems = diffRender;\n      var prependBeforeItemElement = shouldPrependItems && _this.container.firstChild;\n      var i = firstShownItemIndex;\n\n      while (i <= lastShownItemIndex) {\n        if (diffRender && i >= prevState.firstShownItemIndex && i <= prevState.lastShownItemIndex) {\n          // The item is already shown, so don't re-render it.\n          // Next new items will be appended rather than prepended.\n          if (shouldPrependItems) {\n            shouldPrependItems = false;\n          }\n        } else {\n          var _item = _this.renderItem(items[i]);\n\n          if (shouldPrependItems) {\n            log('Prepend item', i); // Append `item` to `this.container` before the retained items.\n\n            _this.container.insertBefore(_item, prependBeforeItemElement);\n          } else {\n            log('Append item', i); // Append `item` to `this.container`.\n\n            _this.container.appendChild(_item);\n          }\n        }\n\n        i++;\n      }\n    });\n\n    _defineProperty(this, \"onUnmount\", function () {\n      _this.virtualScroller.onUnmount();\n    });\n\n    this.container = element;\n    this.renderItem = renderItem;\n\n    var onMount = options.onMount,\n        restOptions = _objectWithoutProperties(options, [\"onMount\"]);\n\n    this.virtualScroller = new VirtualScroller(function () {\n      return _this.container;\n    }, _items, _objectSpread({}, restOptions, {\n      onStateChange: this.onStateChange\n    }));\n\n    if (onMount) {\n      onMount();\n    }\n\n    this.virtualScroller.onMount();\n  }\n\n  _createClass(DOMVirtualScroller, [{\n    key: \"onItemHeightChange\",\n    value: function onItemHeightChange(i) {\n      this.virtualScroller.onItemHeightChange(i);\n    }\n    /**\r\n     * @deprecated\r\n     * `.updateItems()` has been renamed to `.setItems()`.\r\n     */\n\n  }, {\n    key: \"updateItems\",\n    value: function updateItems(newItems, options) {\n      this.setItems(newItems, options);\n    }\n  }, {\n    key: \"setItems\",\n    value: function setItems(newItems, options) {\n      this.virtualScroller.setItems(newItems, options);\n    }\n  }, {\n    key: \"getItemCoordinates\",\n    value: function getItemCoordinates(i) {\n      return this.virtualScroller.getItemCoordinates(i);\n    }\n  }]);\n\n  return DOMVirtualScroller;\n}();\n\nexport { DOMVirtualScroller as default };\n//# sourceMappingURL=DOMVirtualScroller.js.map"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","hasOwnProperty","Object","is","x","y","getOffset","element","onScreenCoordinates","getBoundingClientRect","documentLeftBorderWidth","document","clientLeft","body","documentTopBorderWidth","clientTop","scrollY","window","pageYOffset","scrollX","pageXOffset","top","left","width","height","getScrollY","getScreenHeight","innerHeight","_toConsumableArray","arr","Array","isArray","i","arr2","length","_arrayWithoutHoles","iter","toString","call","from","_iterableToArray","TypeError","_nonIterableSpread","log","isDebug","_console","_len","arguments","args","_key","console","apply","concat","VirtualScrollerDebug","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","ItemHeights","getContainerNode","getState","instance","Constructor","_classCallCheck","this","reset","protoProps","staticProps","value","measuredItemsHeight","firstMeasuredItemIndex","undefined","lastMeasuredItemIndex","itemHeights","firstShownItemIndex","container","nodeIndex","childNodes","firstItem","secondItem","firstItemRect","spacing","fromIndex","toIndex","itemSpacing","getItemSpacing","previousFirstMeasuredItemIndex","previousLastMeasuredItemIndex","firstMeasuredItemIndexHasBeenUpdated","_getItemHeight","set","previousHeight","get","count","px","number","toFixed","_objectSpread","source","ownKeys","keys","getOwnPropertySymbols","filter","sym","getOwnPropertyDescriptor","forEach","_defineProperty","WINDOW_RESIZE_THROTTLE_DURATION","VirtualScroller","items","func","interval","timeout","executedAt","scheduled","_this","options","onUpdateShownItemIndexes","reason","setState","getInitialLayoutState","onInitialRender","Date","now","remaining","clearTimeout","setTimeout","callback","_this$getShownItemInd","getShownItemIndexes","lastShownItemIndex","redoLayoutAfterRender","beforeItemsHeight","getBeforeItemsHeight","afterItemsHeight","getAfterItemsHeight","updateWillBeHiddenItemHeightsAndState","bypass","getAverage","slice","itemStates","onShowItems","updateShownItemIndexes","isMounted","updateShownItemIndexesRecursive","onDoneUpdatingItemIndexes","_this$restoreScrollAf","restoreScrollAfterPrepend","index","screenTop","scrollByY","getItemElement","scrollTo","_ref","force","getItemsCount","isUpdatingItemIndexes","onUserStopsScrollingTimeout","forceRender","latestLayoutScreenTopAfterMargin","latestLayoutScreenBottomAfterMargin","onUserStoppedScrolling","updateLayout","onStateChange","preserveScrollPositionAtBottomOnMount","bypassBatchSize","estimatedItemHeight","onItemFirstRender","state","initialItems","firstChild","removeChild","clearElement","prevState","objA","objB","keysA","keysB","shallowEqual","onUpdate","documentHeight","documentElement","scrollHeight","getInitialState","onInitItemHeights","customState","itemsCount","Math","min","getLastShownItemIndex","getEstimatedItemHeight","ceil","getEstimatedItemsCount","getEstimatedItemsCountOnScreen","firstSeenItemIndex","_i","lastSeenItemIndex","_i2","addEventListener","onScroll","onResize","_this$getState","updateItemHeights","removeEventListener","watchContainerElementTopCoordinateTimer","_this$getState2","update","updateItemHeight","itemState","JSON","stringify","newHeight","j","bottom","screenBottom","listTop","showItemsFromIndex","showItemsToIndex","itemsHeight","heightLeft","getOffscreenListShownItemIndexes","indexes","getVisibleItemIndexes","_this2","startedAt","check","_getOffset3","watchContainerElementTopCoordinate","_getScreenBounds","getScreenBounds","getMargin","getItemIndexes","restoreScroll","previousItems","nextItems","firstPreviousItemIndex","indexOf","newItems","setItems","_this3","_this$getState9","_getItemsDiff","lastPreviousItemIndex","offset","arePreviousItemsPreserved","prependedItemsCount","appendedItemsCount","getItemsDiff","isIncrementalUpdate","onPrepend","preserveScrollPositionOnPrependItems","preserveScrollPosition","captureScroll","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","sourceSymbolKeys","propertyIsEnumerable","DOMVirtualScroller","_items","renderItem","style","paddingTop","paddingBottom","diffRender","item","shouldPrependItems","prependBeforeItemElement","_item","insertBefore","appendChild","virtualScroller","onUnmount","onMount","restOptions","onItemHeightChange","getItemCoordinates"],"mappings":"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"}